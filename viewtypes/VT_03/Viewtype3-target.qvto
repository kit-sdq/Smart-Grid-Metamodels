/* Generated ModelJoin transformation 
 *
 */
transformation M1toM2(
in __CIM: _CIM, 
in __substationStandard: _substationStandard, 
out __jointarget: _jointarget,
out __mjtrace: _mjtrace);	
	
// source metamodels
modeltype _substationStandard uses "substationStandard";
modeltype _CIM uses "http://iec.ch/TC57/2009/CIM-schema-cim14";

// target metamodel
modeltype _jointarget uses "GeneratorsOverviewView";
// trace metamodel
modeltype _mjtrace uses "GeneratorsOverviewView.trace";
	
//alway import ecore
modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');

main() {
-- ###
-- # operations for target class GeneratingUnit
-- ##

-- get all elements of of type GeneratingUnit and ZGEN
var leftAllGeneratingUnit = __CIM.objectsOfType(_CIM::IEC61970::Generation::Production::GeneratingUnit);
var rightAllGeneratingUnit = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZGEN);

-- theta join operation
rightAllGeneratingUnit->forEach(rightGeneratingUnit) {
	leftAllGeneratingUnit->map thetaJoin_GeneratingUnit_ZGEN_To_GeneratingUnit(rightGeneratingUnit);
};


	-- keep outgoing references


	var refAllOutageSchedule_4b9068bc_db35_432b_9070_dd511deda9ce = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
	refAllOutageSchedule_4b9068bc_db35_432b_9070_dd511deda9ce->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(OutageSchedule)->selectByKind(_CIM::IEC61970::Outage::OutageSchedule)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_OutageSchedule(refElem.resolveone(_jointarget::OutageSchedule));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_OutageSchedule(refElem);
			}endif;
			refElem.resolveone(_jointarget::OutageSchedule).map trace_keepOutgoing_OutageSchedule(refElem);
		};
	};
	-- keep outgoing references


	var refAllGenUnitOpSchedule_4005dc17_ddf3_47cc_bf87_6ca73bb213b1 = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
	refAllGenUnitOpSchedule_4005dc17_ddf3_47cc_bf87_6ca73bb213b1->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Generation::Production::GeneratingUnit)->collect(GenUnitOpSchedule)->selectByKind(_CIM::IEC61970::Generation::Production::GenUnitOpSchedule)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_GenUnitOpSchedule(refElem.resolveone(_jointarget::GenUnitOpSchedule));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_GenUnitOpSchedule(refElem);
			}endif;
			refElem.resolveone(_jointarget::GenUnitOpSchedule).map trace_keepOutgoing_GenUnitOpSchedule(refElem);
		};
	};
	-- keep outgoing references


	var refAllControlAreaGeneratingUnit_396769e5_2798_4ecf_a10b_919277fcbfad = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
	refAllControlAreaGeneratingUnit_396769e5_2798_4ecf_a10b_919277fcbfad->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Generation::Production::GeneratingUnit)->collect(ControlAreaGeneratingUnit)->selectByKind(_CIM::IEC61970::ControlArea::ControlAreaGeneratingUnit)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_ControlAreaGeneratingUnit(refElem.resolveone(_jointarget::ControlAreaGeneratingUnit));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_ControlAreaGeneratingUnit(refElem);
			}endif;
			refElem.resolveone(_jointarget::ControlAreaGeneratingUnit).map trace_keepOutgoing_ControlAreaGeneratingUnit(refElem);
		};
	};
	-- keep outgoing references


	var refAllTimePoints_64a8c8da_594a_48af_867f_8b2720e04cc9 = __jointarget.objectsOfType(_jointarget::OutageSchedule);
	refAllTimePoints_64a8c8da_594a_48af_867f_8b2720e04cc9->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::IrregularIntervalSchedule)->collect(TimePoints)->selectByKind(_CIM::IEC61970::Core::IrregularTimePoint)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_TimePoints(refElem.resolveone(_jointarget::IrregularTimePoint));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_TimePoints(refElem);
			}endif;
			refElem.resolveone(_jointarget::IrregularTimePoint).map trace_keepOutgoing_TimePoints(refElem);
		};
	};
	-- keep outgoing references


	var refAllPlannedOutage_c9af4d30_884a_481e_95d2_533c48667139 = __jointarget.objectsOfType(_jointarget::OutageSchedule);
	refAllPlannedOutage_c9af4d30_884a_481e_95d2_533c48667139->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Outage::OutageSchedule)->collect(PlannedOutage)->selectByKind(_CIM::IEC61970::Informative::InfOperations::PlannedOutage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_PlannedOutage(refElem.resolveone(_jointarget::PlannedOutage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_PlannedOutage(refElem);
			}endif;
			refElem.resolveone(_jointarget::PlannedOutage).map trace_keepOutgoing_PlannedOutage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTimePoints_ea814f2c_cd92_438b_a9d4_b3e868ae5d1e = __jointarget.objectsOfType(_jointarget::GenUnitOpSchedule);
	refAllTimePoints_ea814f2c_cd92_438b_a9d4_b3e868ae5d1e->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::RegularIntervalSchedule)->collect(TimePoints)->selectByKind(_CIM::IEC61970::Core::RegularTimePoint)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_TimePoints(refElem.resolveone(_jointarget::RegularTimePoint));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_TimePoints(refElem);
			}endif;
			refElem.resolveone(_jointarget::RegularTimePoint).map trace_keepOutgoing_TimePoints(refElem);
		};
	};
	-- keep outgoing references


	var refAllControlArea_13b21bff_7163_46fc_b03d_d2c5ce2ab3a1 = __jointarget.objectsOfType(_jointarget::ControlAreaGeneratingUnit);
	refAllControlArea_13b21bff_7163_46fc_b03d_d2c5ce2ab3a1->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::ControlArea::ControlAreaGeneratingUnit)->collect(ControlArea)->selectByKind(_CIM::IEC61970::ControlArea::ControlArea)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_ControlArea(refElem.resolveone(_jointarget::ControlArea));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_ControlArea(refElem);
			}endif;
			refElem.resolveone(_jointarget::ControlArea).map trace_keepOutgoing_ControlArea(refElem);
		};
	};



	-- keep attributes
	var keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96 = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_allocSpinResP(sourceClass.allocSpinResP)	
				};
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_startupCost(sourceClass.startupCost)	
				};
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_startupTime(sourceClass.startupTime)	
				};
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_minimumOffTime(sourceClass.minimumOffTime)	
				};
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_controlDeadband(sourceClass.controlDeadband)	
				};
			keepAttGeneratingUnit_4b725dd3_e46f_4a05_8fda_4be2b877dc96->forEach(elem) {
				var sourceClass = elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
				elem.map update_attribute_GnSt(sourceClass.GnSt)	
				};
	var keepAttOutageSchedule_db2ad1a2_359a_4eed_a13f_31e4b9a310e4 = __jointarget.objectsOfType(_jointarget::OutageSchedule);
			keepAttOutageSchedule_db2ad1a2_359a_4eed_a13f_31e4b9a310e4->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::BasicIntervalSchedule);
				elem.map update_attribute_startTime(sourceClass.startTime)	
				};
	var keepAttIrregularTimePoint_61b58a5c_503f_4c80_9223_ecdbd3e69d11 = __jointarget.objectsOfType(_jointarget::IrregularTimePoint);
			keepAttIrregularTimePoint_61b58a5c_503f_4c80_9223_ecdbd3e69d11->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IrregularTimePoint);
				elem.map update_attribute_time(sourceClass.time)	
				};
			keepAttIrregularTimePoint_61b58a5c_503f_4c80_9223_ecdbd3e69d11->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IrregularTimePoint);
				elem.map update_attribute_value1(sourceClass.value1)	
				};
			keepAttIrregularTimePoint_61b58a5c_503f_4c80_9223_ecdbd3e69d11->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IrregularTimePoint);
				elem.map update_attribute_value2(sourceClass.value2)	
				};
	var keepAttPlannedOutage_c4bdb6be_42a2_4918_ae55_7006f8dee870 = __jointarget.objectsOfType(_jointarget::PlannedOutage);
			keepAttPlannedOutage_c4bdb6be_42a2_4918_ae55_7006f8dee870->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Informative::InfOperations::PlannedOutage);
				elem.map update_attribute_kind(sourceClass.kind)	
				};
	var keepAttGenUnitOpSchedule_c1847a7b_0ace_44a2_8c54_b753e413ad2c = __jointarget.objectsOfType(_jointarget::GenUnitOpSchedule);
			keepAttGenUnitOpSchedule_c1847a7b_0ace_44a2_8c54_b753e413ad2c->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::RegularIntervalSchedule);
				elem.map update_attribute_endTime(sourceClass.endTime)	
				};
			keepAttGenUnitOpSchedule_c1847a7b_0ace_44a2_8c54_b753e413ad2c->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::RegularIntervalSchedule);
				elem.map update_attribute_timeStep(sourceClass.timeStep)	
				};
	var keepAttRegularTimePoint_3c4df0ea_7401_4426_b508_967144b097dc = __jointarget.objectsOfType(_jointarget::RegularTimePoint);
			keepAttRegularTimePoint_3c4df0ea_7401_4426_b508_967144b097dc->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::RegularTimePoint);
				elem.map update_attribute_value1(sourceClass.value1)	
				};
			keepAttRegularTimePoint_3c4df0ea_7401_4426_b508_967144b097dc->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::RegularTimePoint);
				elem.map update_attribute_value2(sourceClass.value2)	
				};
			keepAttRegularTimePoint_3c4df0ea_7401_4426_b508_967144b097dc->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::RegularTimePoint);
				elem.map update_attribute_sequenceNumber(sourceClass.sequenceNumber)	
				};
	var keepAttControlArea_68696921_3767_41f4_b4fa_e26e20a1e157 = __jointarget.objectsOfType(_jointarget::ControlArea);
			keepAttControlArea_68696921_3767_41f4_b4fa_e26e20a1e157->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};



	-- keep calculated
	var keepAttGeneratingUnit_0500087f_9a6c_43e6_9fb9_e63496db95cd = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
keepAttGeneratingUnit_0500087f_9a6c_43e6_9fb9_e63496db95cd->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
	elem.map update_attribute_freeCapacity(leftElement, rightElement)	
	};
keepAttGeneratingUnit_0500087f_9a6c_43e6_9fb9_e63496db95cd->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
	elem.map update_attribute_Type(leftElement, rightElement)	
	};



	-- keep aggregates

	}
	
-- ##
-- # Natural Join Mappings
-- ##

-- ##
-- # Left Outer Join Mappings
-- ##
	
-- ##
-- # Theta Join Mappings
-- ##

-- mapping for GeneratingUnit
mapping _CIM::IEC61970::Generation::Production::GeneratingUnit::thetaJoin_GeneratingUnit_ZGEN_To_GeneratingUnit(rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) : _jointarget::GeneratingUnit 
when {
		rightElement.NamePlt.IdNs = self.mRID
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZGEN(result);
			result.map thetaJoin_trace_ZGEN(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZGEN::thetaJoin_update_ZGEN(rightElement : _jointarget::GeneratingUnit) : _jointarget::GeneratingUnit {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::GeneratingUnit::thetaJoin_trace_ZGEN(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) : _mjtrace::join_GeneratingUnit_ZGEN_GeneratingUnit {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- ##
-- # Keep outgoing Mappings
-- ##
-- mappings for GeneratingUnit

-- set the links for "OutageSchedule" if instances already exist
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_OutageSchedule(elem : _jointarget::OutageSchedule) {
	self.OutageSchedule:=elem;
}

-- set the links for "OutageSchedule" if instances have to be created
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_and_create_OutageSchedule(elem : _CIM::IEC61970::Outage::OutageSchedule) {
	self.OutageSchedule:=elem.map OutageSchedule_OutageSchedule_to_OutageSchedule();
}

-- create instances of the type of "OutageSchedule"
mapping _CIM::IEC61970::Outage::OutageSchedule::OutageSchedule_OutageSchedule_to_OutageSchedule() : _jointarget::OutageSchedule {
}

mapping _jointarget::OutageSchedule::trace_keepOutgoing_OutageSchedule(source : _CIM::IEC61970::Outage::OutageSchedule) : _mjtrace::ref_OutageSchedule_OutageSchedule_OutageSchedule {
	result.source := source;
	result.target := self;
}

-- mappings for GeneratingUnit

-- set the links for "GenUnitOpSchedule" if instances already exist
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_GenUnitOpSchedule(elem : _jointarget::GenUnitOpSchedule) {
	self.GenUnitOpSchedule:=elem;
}

-- set the links for "GenUnitOpSchedule" if instances have to be created
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_and_create_GenUnitOpSchedule(elem : _CIM::IEC61970::Generation::Production::GenUnitOpSchedule) {
	self.GenUnitOpSchedule:=elem.map GenUnitOpSchedule_GenUnitOpSchedule_to_GenUnitOpSchedule();
}

-- create instances of the type of "GenUnitOpSchedule"
mapping _CIM::IEC61970::Generation::Production::GenUnitOpSchedule::GenUnitOpSchedule_GenUnitOpSchedule_to_GenUnitOpSchedule() : _jointarget::GenUnitOpSchedule {
}

mapping _jointarget::GenUnitOpSchedule::trace_keepOutgoing_GenUnitOpSchedule(source : _CIM::IEC61970::Generation::Production::GenUnitOpSchedule) : _mjtrace::ref_GenUnitOpSchedule_GenUnitOpSchedule_GenUnitOpSchedule {
	result.source := source;
	result.target := self;
}

-- mappings for GeneratingUnit

-- set the links for "ControlAreaGeneratingUnit" if instances already exist
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_ControlAreaGeneratingUnit(elem : _jointarget::ControlAreaGeneratingUnit) {
	self.ControlAreaGeneratingUnit+=elem;
}

-- set the links for "ControlAreaGeneratingUnit" if instances have to be created
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_and_create_ControlAreaGeneratingUnit(elem : _CIM::IEC61970::ControlArea::ControlAreaGeneratingUnit) {
	self.ControlAreaGeneratingUnit+=elem.map ControlAreaGeneratingUnit_ControlAreaGeneratingUnit_to_ControlAreaGeneratingUnit();
}

-- create instances of the type of "ControlAreaGeneratingUnit"
mapping _CIM::IEC61970::ControlArea::ControlAreaGeneratingUnit::ControlAreaGeneratingUnit_ControlAreaGeneratingUnit_to_ControlAreaGeneratingUnit() : _jointarget::ControlAreaGeneratingUnit {
}

mapping _jointarget::ControlAreaGeneratingUnit::trace_keepOutgoing_ControlAreaGeneratingUnit(source : _CIM::IEC61970::ControlArea::ControlAreaGeneratingUnit) : _mjtrace::ref_ControlAreaGeneratingUnit_ControlAreaGeneratingUnit_ControlAreaGeneratingUnit {
	result.source := source;
	result.target := self;
}

-- mappings for OutageSchedule

-- set the links for "TimePoints" if instances already exist
mapping inout _jointarget::OutageSchedule::update_keepOutgoing_TimePoints(elem : _jointarget::IrregularTimePoint) {
	self.TimePoints+=elem;
}

-- set the links for "TimePoints" if instances have to be created
mapping inout _jointarget::OutageSchedule::update_keepOutgoing_and_create_TimePoints(elem : _CIM::IEC61970::Core::IrregularTimePoint) {
	self.TimePoints+=elem.map TimePoints_IrregularTimePoint_to_IrregularTimePoint();
}

-- create instances of the type of "TimePoints"
mapping _CIM::IEC61970::Core::IrregularTimePoint::TimePoints_IrregularTimePoint_to_IrregularTimePoint() : _jointarget::IrregularTimePoint {
}

mapping _jointarget::IrregularTimePoint::trace_keepOutgoing_TimePoints(source : _CIM::IEC61970::Core::IrregularTimePoint) : _mjtrace::ref_IrregularTimePoint_IrregularTimePoint_TimePoints {
	result.source := source;
	result.target := self;
}

-- mappings for OutageSchedule

-- set the links for "PlannedOutage" if instances already exist
mapping inout _jointarget::OutageSchedule::update_keepOutgoing_PlannedOutage(elem : _jointarget::PlannedOutage) {
	self.PlannedOutage:=elem;
}

-- set the links for "PlannedOutage" if instances have to be created
mapping inout _jointarget::OutageSchedule::update_keepOutgoing_and_create_PlannedOutage(elem : _CIM::IEC61970::Informative::InfOperations::PlannedOutage) {
	self.PlannedOutage:=elem.map PlannedOutage_PlannedOutage_to_PlannedOutage();
}

-- create instances of the type of "PlannedOutage"
mapping _CIM::IEC61970::Informative::InfOperations::PlannedOutage::PlannedOutage_PlannedOutage_to_PlannedOutage() : _jointarget::PlannedOutage {
}

mapping _jointarget::PlannedOutage::trace_keepOutgoing_PlannedOutage(source : _CIM::IEC61970::Informative::InfOperations::PlannedOutage) : _mjtrace::ref_PlannedOutage_PlannedOutage_PlannedOutage {
	result.source := source;
	result.target := self;
}

-- mappings for GenUnitOpSchedule

-- set the links for "TimePoints" if instances already exist
mapping inout _jointarget::GenUnitOpSchedule::update_keepOutgoing_TimePoints(elem : _jointarget::RegularTimePoint) {
	self.TimePoints+=elem;
}

-- set the links for "TimePoints" if instances have to be created
mapping inout _jointarget::GenUnitOpSchedule::update_keepOutgoing_and_create_TimePoints(elem : _CIM::IEC61970::Core::RegularTimePoint) {
	self.TimePoints+=elem.map TimePoints_RegularTimePoint_to_RegularTimePoint();
}

-- create instances of the type of "TimePoints"
mapping _CIM::IEC61970::Core::RegularTimePoint::TimePoints_RegularTimePoint_to_RegularTimePoint() : _jointarget::RegularTimePoint {
}

mapping _jointarget::RegularTimePoint::trace_keepOutgoing_TimePoints(source : _CIM::IEC61970::Core::RegularTimePoint) : _mjtrace::ref_RegularTimePoint_RegularTimePoint_TimePoints {
	result.source := source;
	result.target := self;
}

-- mappings for ControlAreaGeneratingUnit

-- set the links for "ControlArea" if instances already exist
mapping inout _jointarget::ControlAreaGeneratingUnit::update_keepOutgoing_ControlArea(elem : _jointarget::ControlArea) {
	self.ControlArea:=elem;
}

-- set the links for "ControlArea" if instances have to be created
mapping inout _jointarget::ControlAreaGeneratingUnit::update_keepOutgoing_and_create_ControlArea(elem : _CIM::IEC61970::ControlArea::ControlArea) {
	self.ControlArea:=elem.map ControlArea_ControlArea_to_ControlArea();
}

-- create instances of the type of "ControlArea"
mapping _CIM::IEC61970::ControlArea::ControlArea::ControlArea_ControlArea_to_ControlArea() : _jointarget::ControlArea {
}

mapping _jointarget::ControlArea::trace_keepOutgoing_ControlArea(source : _CIM::IEC61970::ControlArea::ControlArea) : _mjtrace::ref_ControlArea_ControlArea_ControlArea {
	result.source := source;
	result.target := self;
}


-- ##
-- # Keep incoming Mappings
-- ##
-- ##
-- # Keep attribute Mappings
-- ##
mapping inout _jointarget::GeneratingUnit::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_allocSpinResP(attValue : Real) {
	self.allocSpinResP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_startupCost(attValue : Real) {
	self.startupCost:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_startupTime(attValue : Real) {
	self.startupTime:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_minimumOffTime(attValue : Real) {
	self.minimumOffTime:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_controlDeadband(attValue : Real) {
	self.controlDeadband:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_GnSt(attValue : substationStandard::Enumerations::GeneratorStateKind) {
	self.GnSt:=attValue;
}
mapping inout _jointarget::OutageSchedule::update_attribute_startTime(attValue : String) {
	self.startTime:=attValue;
}
mapping inout _jointarget::IrregularTimePoint::update_attribute_time(attValue : Real) {
	self.time:=attValue;
}
mapping inout _jointarget::IrregularTimePoint::update_attribute_value1(attValue : Real) {
	self.value1:=attValue;
}
mapping inout _jointarget::IrregularTimePoint::update_attribute_value2(attValue : Real) {
	self.value2:=attValue;
}
mapping inout _jointarget::PlannedOutage::update_attribute_kind(attValue : CIM::IEC61970::Informative::InfOperations::OutageKind) {
	self.kind:=attValue;
}
mapping inout _jointarget::GenUnitOpSchedule::update_attribute_endTime(attValue : String) {
	self.endTime:=attValue;
}
mapping inout _jointarget::GenUnitOpSchedule::update_attribute_timeStep(attValue : Real) {
	self.timeStep:=attValue;
}
mapping inout _jointarget::RegularTimePoint::update_attribute_value1(attValue : Real) {
	self.value1:=attValue;
}
mapping inout _jointarget::RegularTimePoint::update_attribute_value2(attValue : Real) {
	self.value2:=attValue;
}
mapping inout _jointarget::RegularTimePoint::update_attribute_sequenceNumber(attValue : Integer) {
	self.sequenceNumber:=attValue;
}
mapping inout _jointarget::ControlArea::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}

-- ##
-- # Keep calculated Mappings
-- ##
mapping inout _jointarget::GeneratingUnit::update_attribute_freeCapacity(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) {
	self.freeCapacity:=leftElement.ratedGrossMaxP - rightElement.PwrRtg.setMag.f;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_Type(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) {
	self.Type:=if leftElement.oclIsKindOf(CIM::IEC61970::Generation::Production::HydroGeneratingUnit) or leftElement.oclIsKindOf(CIM::IEC61970::Generation::Production::ThermalGeneratingUnit) or leftElement.oclIsKindOf(CIM::IEC61970::Generation::Production::NuclearGeneratingUnit) then 'controlable' else 'not controlable' endif;
}



-- ##
-- # Keep aggregate Mappings
-- ##
