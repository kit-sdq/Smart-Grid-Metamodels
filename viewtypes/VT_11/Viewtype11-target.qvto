/* Generated ModelJoin transformation 
 *
 */
transformation M1toM2(
in __CIM: _CIM, 
in __COSEM: _COSEM, 
out __jointarget: _jointarget,
out __mjtrace: _mjtrace);	
	
// source metamodels
modeltype _CIM uses "http://iec.ch/TC57/2009/CIM-schema-cim14";
modeltype _COSEM uses "cosem";
// target metamodel
modeltype _jointarget uses "ConsumerMonitoringViewtype";
// trace metamodel
modeltype _mjtrace uses "ConsumerMonitoringViewtype.trace";
	
//alway import ecore
modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');

main() {
-- ###
-- # operations for target class Meter
-- ##

-- get all elements of of type MeterAsset and PhysicalDevice
var leftAllMeter = __CIM.objectsOfType(_CIM::IEC61968::Metering::MeterAsset);
var rightAllMeter = __COSEM.objectsOfType(_COSEM::PhysicalDevice);

-- theta join operation
rightAllMeter->forEach(rightMeter) {
	leftAllMeter->map thetaJoin_MeterAsset_PhysicalDevice_To_Meter(rightMeter);
};


	-- keep outgoing references


	var refAllServiceDeliveryPoint_207ed5ce_f008_4955_839c_67e417a39416 = __jointarget.objectsOfType(_jointarget::Meter);
	refAllServiceDeliveryPoint_207ed5ce_f008_4955_839c_67e417a39416->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61968::Metering::EndDeviceAsset)->collect(ServiceDeliveryPoint)->selectByKind(_CIM::IEC61968::Metering::ServiceDeliveryPoint)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_ServiceDeliveryPoint(refElem.resolveone(_jointarget::ServiceDeliveryPoint));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_ServiceDeliveryPoint(refElem);
			}endif;
			refElem.resolveone(_jointarget::ServiceDeliveryPoint).map trace_keepOutgoing_ServiceDeliveryPoint(refElem);
		};
	};
	-- keep outgoing references


	var refAllEnergyConsumer_becda36d_bead_4865_9d8b_ec964aacd4f8 = __jointarget.objectsOfType(_jointarget::ServiceDeliveryPoint);
	refAllEnergyConsumer_becda36d_bead_4865_9d8b_ec964aacd4f8->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61968::Metering::ServiceDeliveryPoint)->collect(EnergyConsumer)->selectByKind(_CIM::IEC61970::Wires::EnergyConsumer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EnergyConsumer(refElem.resolveone(_jointarget::EnergyConsumer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EnergyConsumer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EnergyConsumer).map trace_keepOutgoing_EnergyConsumer(refElem);
		};
	};
	-- keep outgoing references


	var refAllLoadGroup_2510c568_f232_4fac_a754_b249c5f535d5 = __jointarget.objectsOfType(_jointarget::ConformLoad);
	refAllLoadGroup_2510c568_f232_4fac_a754_b249c5f535d5->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::LoadModel::ConformLoad)->collect(LoadGroup)->selectByKind(_CIM::IEC61970::LoadModel::ConformLoadGroup)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_LoadGroup(refElem.resolveone(_jointarget::ConformLoadGroup));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_LoadGroup(refElem);
			}endif;
			refElem.resolveone(_jointarget::ConformLoadGroup).map trace_keepOutgoing_LoadGroup(refElem);
		};
	};
	-- keep outgoing references


	var refAllSubLoadArea_3309b8dd_c782_4a5c_9d68_a81ec0179ea9 = __jointarget.objectsOfType(_jointarget::LoadGroup);
	refAllSubLoadArea_3309b8dd_c782_4a5c_9d68_a81ec0179ea9->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::LoadModel::LoadGroup)->collect(SubLoadArea)->selectByKind(_CIM::IEC61970::LoadModel::SubLoadArea)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_SubLoadArea(refElem.resolveone(_jointarget::SubLoadArea));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_SubLoadArea(refElem);
			}endif;
			refElem.resolveone(_jointarget::SubLoadArea).map trace_keepOutgoing_SubLoadArea(refElem);
		};
	};
	-- keep outgoing references


	var refAllLoadArea_76fb784c_0229_4668_a328_336c49690eb3 = __jointarget.objectsOfType(_jointarget::SubLoadArea);
	refAllLoadArea_76fb784c_0229_4668_a328_336c49690eb3->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::LoadModel::SubLoadArea)->collect(LoadArea)->selectByKind(_CIM::IEC61970::LoadModel::LoadArea)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_LoadArea(refElem.resolveone(_jointarget::LoadArea));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_LoadArea(refElem);
			}endif;
			refElem.resolveone(_jointarget::LoadArea).map trace_keepOutgoing_LoadArea(refElem);
		};
	};
	-- keep outgoing references


	var refAllControlArea_80871056_a5b1_4044_98df_52bf63ed522a = __jointarget.objectsOfType(_jointarget::LoadArea);
	refAllControlArea_80871056_a5b1_4044_98df_52bf63ed522a->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::LoadModel::EnergyArea)->collect(ControlArea)->selectByKind(_CIM::IEC61970::ControlArea::ControlArea)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_ControlArea(refElem.resolveone(_jointarget::ControlArea));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_ControlArea(refElem);
			}endif;
			refElem.resolveone(_jointarget::ControlArea).map trace_keepOutgoing_ControlArea(refElem);
		};
	};
	-- keep outgoing references


	var refAllLoadGroup_a0fdac9a_3b93_4f20_aede_230f3930be1b = __jointarget.objectsOfType(_jointarget::NonConformLoad);
	refAllLoadGroup_a0fdac9a_3b93_4f20_aede_230f3930be1b->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::LoadModel::NonConformLoad)->collect(LoadGroup)->selectByKind(_CIM::IEC61970::LoadModel::NonConformLoadGroup)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_LoadGroup(refElem.resolveone(_jointarget::NonConformLoadGroup));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_LoadGroup(refElem);
			}endif;
			refElem.resolveone(_jointarget::NonConformLoadGroup).map trace_keepOutgoing_LoadGroup(refElem);
		};
	};



	-- keep attributes
	var keepAttEnergyConsumer_dee4e5e2_4387_4fdb_8f58_8a2f31dd2c69 = __jointarget.objectsOfType(_jointarget::EnergyConsumer);
			keepAttEnergyConsumer_dee4e5e2_4387_4fdb_8f58_8a2f31dd2c69->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttEnergyConsumer_dee4e5e2_4387_4fdb_8f58_8a2f31dd2c69->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::EnergyConsumer);
				elem.map update_attribute_pfixed(sourceClass.pfixed)	
				};
	var keepAttControlArea_253d8da1_6184_4982_b643_64f9068fa7ed = __jointarget.objectsOfType(_jointarget::ControlArea);
			keepAttControlArea_253d8da1_6184_4982_b643_64f9068fa7ed->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};



	-- keep calculated
	var keepAttMeter_dd0927e6_e860_4a16_ae28_417c3ca1e823 = __jointarget.objectsOfType(_jointarget::Meter);
keepAttMeter_dd0927e6_e860_4a16_ae28_417c3ca1e823->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61968::Metering::MeterAsset);
	var rightElement =  elem.invresolveone(_COSEM::PhysicalDevice);
	elem.map update_attribute_PowerImport(leftElement, rightElement)	
	};
keepAttMeter_dd0927e6_e860_4a16_ae28_417c3ca1e823->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61968::Metering::MeterAsset);
	var rightElement =  elem.invresolveone(_COSEM::PhysicalDevice);
	elem.map update_attribute_PowerExport(leftElement, rightElement)	
	};
	var keepAttServiceDeliveryPoint_2a3404b6_6e0e_4e81_9695_1ff0caa92fc9 = __jointarget.objectsOfType(_jointarget::ServiceDeliveryPoint);
keepAttServiceDeliveryPoint_2a3404b6_6e0e_4e81_9695_1ff0caa92fc9->forEach(elem) {
	var sourceClass = elem.invresolveone(_CIM::IEC61968::Metering::ServiceDeliveryPoint);
	elem.map update_attribute_loadForecast(sourceClass)	
	};
keepAttServiceDeliveryPoint_2a3404b6_6e0e_4e81_9695_1ff0caa92fc9->forEach(elem) {
	var sourceClass = elem.invresolveone(_CIM::IEC61968::Metering::ServiceDeliveryPoint);
	elem.map update_attribute_DeliveredPower(sourceClass)	
	};



	-- keep aggregates

	}
	
-- ##
-- # Natural Join Mappings
-- ##

-- ##
-- # Left Outer Join Mappings
-- ##
	
-- ##
-- # Theta Join Mappings
-- ##

-- mapping for Meter
mapping _CIM::IEC61968::Metering::MeterAsset::thetaJoin_MeterAsset_PhysicalDevice_To_Meter(rightElement : _COSEM::PhysicalDevice) : _jointarget::Meter 
when {
		self.mRID = rightElement.ID
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_PhysicalDevice(result);
			result.map thetaJoin_trace_PhysicalDevice(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _COSEM::PhysicalDevice::thetaJoin_update_PhysicalDevice(rightElement : _jointarget::Meter) : _jointarget::Meter {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::Meter::thetaJoin_trace_PhysicalDevice(leftElement : _CIM::IEC61968::Metering::MeterAsset, rightElement : _COSEM::PhysicalDevice) : _mjtrace::join_MeterAsset_PhysicalDevice_Meter {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- ##
-- # Keep outgoing Mappings
-- ##
-- mappings for Meter

-- set the links for "ServiceDeliveryPoint" if instances already exist
mapping inout _jointarget::Meter::update_keepOutgoing_ServiceDeliveryPoint(elem : _jointarget::ServiceDeliveryPoint) {
	self.ServiceDeliveryPoint:=elem;
}

-- set the links for "ServiceDeliveryPoint" if instances have to be created
mapping inout _jointarget::Meter::update_keepOutgoing_and_create_ServiceDeliveryPoint(elem : _CIM::IEC61968::Metering::ServiceDeliveryPoint) {
	self.ServiceDeliveryPoint:=elem.map ServiceDeliveryPoint_ServiceDeliveryPoint_to_ServiceDeliveryPoint();
}

-- create instances of the type of "ServiceDeliveryPoint"
mapping _CIM::IEC61968::Metering::ServiceDeliveryPoint::ServiceDeliveryPoint_ServiceDeliveryPoint_to_ServiceDeliveryPoint() : _jointarget::ServiceDeliveryPoint {
}

mapping _jointarget::ServiceDeliveryPoint::trace_keepOutgoing_ServiceDeliveryPoint(source : _CIM::IEC61968::Metering::ServiceDeliveryPoint) : _mjtrace::ref_ServiceDeliveryPoint_ServiceDeliveryPoint_ServiceDeliveryPoint {
	result.source := source;
	result.target := self;
}

-- mappings for ServiceDeliveryPoint

-- set the links for "EnergyConsumer" if instances already exist
mapping inout _jointarget::ServiceDeliveryPoint::update_keepOutgoing_EnergyConsumer(elem : _jointarget::EnergyConsumer) {
	self.EnergyConsumer:=elem;
}

-- set the links for "EnergyConsumer" if instances have to be created
mapping inout _jointarget::ServiceDeliveryPoint::update_keepOutgoing_and_create_EnergyConsumer(elem : _CIM::IEC61970::Wires::EnergyConsumer) {
	self.EnergyConsumer:=elem.map EnergyConsumer_EnergyConsumer_to_EnergyConsumer();
}

-- create instances of the type of "EnergyConsumer"
mapping _CIM::IEC61970::Wires::EnergyConsumer::EnergyConsumer_EnergyConsumer_to_EnergyConsumer() : _jointarget::EnergyConsumer {
}

mapping _jointarget::EnergyConsumer::trace_keepOutgoing_EnergyConsumer(source : _CIM::IEC61970::Wires::EnergyConsumer) : _mjtrace::ref_EnergyConsumer_EnergyConsumer_EnergyConsumer {
	result.source := source;
	result.target := self;
}

-- mappings for ConformLoad

-- set the links for "LoadGroup" if instances already exist
mapping inout _jointarget::ConformLoad::update_keepOutgoing_LoadGroup(elem : _jointarget::ConformLoadGroup) {
	self.LoadGroup:=elem;
}

-- set the links for "LoadGroup" if instances have to be created
mapping inout _jointarget::ConformLoad::update_keepOutgoing_and_create_LoadGroup(elem : _CIM::IEC61970::LoadModel::ConformLoadGroup) {
	self.LoadGroup:=elem.map LoadGroup_ConformLoadGroup_to_ConformLoadGroup();
}

-- create instances of the type of "LoadGroup"
mapping _CIM::IEC61970::LoadModel::ConformLoadGroup::LoadGroup_ConformLoadGroup_to_ConformLoadGroup() : _jointarget::ConformLoadGroup {
}

mapping _jointarget::ConformLoadGroup::trace_keepOutgoing_LoadGroup(source : _CIM::IEC61970::LoadModel::ConformLoadGroup) : _mjtrace::ref_ConformLoadGroup_ConformLoadGroup_LoadGroup {
	result.source := source;
	result.target := self;
}

-- mappings for LoadGroup

-- set the links for "SubLoadArea" if instances already exist
mapping inout _jointarget::LoadGroup::update_keepOutgoing_SubLoadArea(elem : _jointarget::SubLoadArea) {
	self.SubLoadArea:=elem;
}

-- set the links for "SubLoadArea" if instances have to be created
mapping inout _jointarget::LoadGroup::update_keepOutgoing_and_create_SubLoadArea(elem : _CIM::IEC61970::LoadModel::SubLoadArea) {
	self.SubLoadArea:=elem.map SubLoadArea_SubLoadArea_to_SubLoadArea();
}

-- create instances of the type of "SubLoadArea"
mapping _CIM::IEC61970::LoadModel::SubLoadArea::SubLoadArea_SubLoadArea_to_SubLoadArea() : _jointarget::SubLoadArea {
}

mapping _jointarget::SubLoadArea::trace_keepOutgoing_SubLoadArea(source : _CIM::IEC61970::LoadModel::SubLoadArea) : _mjtrace::ref_SubLoadArea_SubLoadArea_SubLoadArea {
	result.source := source;
	result.target := self;
}

-- mappings for SubLoadArea

-- set the links for "LoadArea" if instances already exist
mapping inout _jointarget::SubLoadArea::update_keepOutgoing_LoadArea(elem : _jointarget::LoadArea) {
	self.LoadArea:=elem;
}

-- set the links for "LoadArea" if instances have to be created
mapping inout _jointarget::SubLoadArea::update_keepOutgoing_and_create_LoadArea(elem : _CIM::IEC61970::LoadModel::LoadArea) {
	self.LoadArea:=elem.map LoadArea_LoadArea_to_LoadArea();
}

-- create instances of the type of "LoadArea"
mapping _CIM::IEC61970::LoadModel::LoadArea::LoadArea_LoadArea_to_LoadArea() : _jointarget::LoadArea {
}

mapping _jointarget::LoadArea::trace_keepOutgoing_LoadArea(source : _CIM::IEC61970::LoadModel::LoadArea) : _mjtrace::ref_LoadArea_LoadArea_LoadArea {
	result.source := source;
	result.target := self;
}

-- mappings for LoadArea

-- set the links for "ControlArea" if instances already exist
mapping inout _jointarget::LoadArea::update_keepOutgoing_ControlArea(elem : _jointarget::ControlArea) {
	self.ControlArea:=elem;
}

-- set the links for "ControlArea" if instances have to be created
mapping inout _jointarget::LoadArea::update_keepOutgoing_and_create_ControlArea(elem : _CIM::IEC61970::ControlArea::ControlArea) {
	self.ControlArea:=elem.map ControlArea_ControlArea_to_ControlArea();
}

-- create instances of the type of "ControlArea"
mapping _CIM::IEC61970::ControlArea::ControlArea::ControlArea_ControlArea_to_ControlArea() : _jointarget::ControlArea {
}

mapping _jointarget::ControlArea::trace_keepOutgoing_ControlArea(source : _CIM::IEC61970::ControlArea::ControlArea) : _mjtrace::ref_ControlArea_ControlArea_ControlArea {
	result.source := source;
	result.target := self;
}

-- mappings for NonConformLoad

-- set the links for "LoadGroup" if instances already exist
mapping inout _jointarget::NonConformLoad::update_keepOutgoing_LoadGroup(elem : _jointarget::NonConformLoadGroup) {
	self.LoadGroup:=elem;
}

-- set the links for "LoadGroup" if instances have to be created
mapping inout _jointarget::NonConformLoad::update_keepOutgoing_and_create_LoadGroup(elem : _CIM::IEC61970::LoadModel::NonConformLoadGroup) {
	self.LoadGroup:=elem.map LoadGroup_NonConformLoadGroup_to_NonConformLoadGroup();
}

-- create instances of the type of "LoadGroup"
mapping _CIM::IEC61970::LoadModel::NonConformLoadGroup::LoadGroup_NonConformLoadGroup_to_NonConformLoadGroup() : _jointarget::NonConformLoadGroup {
}

mapping _jointarget::NonConformLoadGroup::trace_keepOutgoing_LoadGroup(source : _CIM::IEC61970::LoadModel::NonConformLoadGroup) : _mjtrace::ref_NonConformLoadGroup_NonConformLoadGroup_LoadGroup {
	result.source := source;
	result.target := self;
}


-- ##
-- # Keep incoming Mappings
-- ##
-- ##
-- # Keep attribute Mappings
-- ##
mapping inout _jointarget::EnergyConsumer::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::EnergyConsumer::update_attribute_pfixed(attValue : Real) {
	self.pfixed:=attValue;
}
mapping inout _jointarget::ConformLoad::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::ConformLoad::update_attribute_pfixed(attValue : Real) {
	self.pfixed:=attValue;
}
mapping inout _jointarget::ControlArea::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::NonConformLoad::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::NonConformLoad::update_attribute_pfixed(attValue : Real) {
	self.pfixed:=attValue;
}

-- ##
-- # Keep calculated Mappings
-- ##
mapping inout _jointarget::Meter::update_attribute_PowerImport(leftElement : _CIM::IEC61968::Metering::MeterAsset, rightElement : _COSEM::PhysicalDevice) {
	self.PowerImport:=rightElement.ElectricityValues.ApparentPowermAll;
}
mapping inout _jointarget::Meter::update_attribute_PowerExport(leftElement : _CIM::IEC61968::Metering::MeterAsset, rightElement : _COSEM::PhysicalDevice) {
	self.PowerExport:=rightElement.ElectricityValues.ApparentPowerpAll;
}
mapping inout _jointarget::ServiceDeliveryPoint::update_attribute_loadForecast(sourceElement : _CIM::IEC61968::Metering::ServiceDeliveryPoint) {
	self.loadForecast:=sourceElement.estimatedLoad;
}		
mapping inout _jointarget::ServiceDeliveryPoint::update_attribute_DeliveredPower(sourceElement : _CIM::IEC61968::Metering::ServiceDeliveryPoint) {
	self.DeliveredPower:=sourceElement.ratedPower;
}		



-- ##
-- # Keep aggregate Mappings
-- ##
