/* Generated ModelJoin transformation 
 *
 */
transformation M1toM2(
in __CIM: _CIM, 
in __substationStandard: _substationStandard, 
out __jointarget: _jointarget,
out __mjtrace: _mjtrace);	
	
// source metamodels
modeltype _CIM uses "http://iec.ch/TC57/2009/CIM-schema-cim14";
modeltype _substationStandard uses "substationStandard";
// target metamodel
modeltype _jointarget uses "physicalGridView";
// trace metamodel
modeltype _mjtrace uses "physicalGridView.trace";
	
//alway import ecore
modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');

main() {
-- ###
-- # operations for target class Switch
-- ##

-- get all elements of of type Switch and XSWI
var leftAllSwitch = __CIM.objectsOfType(_CIM::IEC61970::Wires::Switch);
var rightAllSwitch = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupX::XSWI);

-- theta join operation
rightAllSwitch->forEach(rightSwitch) {
	leftAllSwitch->map thetaJoin_Switch_XSWI_To_Switch(rightSwitch);
};
-- ###
-- # operations for target class PowerTransformer
-- ##

-- get all elements of of type PowerTransformer and YPTR
var leftAllPowerTransformer = __CIM.objectsOfType(_CIM::IEC61970::Wires::PowerTransformer);
var rightAllPowerTransformer = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupY::YPTR);

-- theta join operation
rightAllPowerTransformer->forEach(rightPowerTransformer) {
	leftAllPowerTransformer->map thetaJoin_PowerTransformer_YPTR_To_PowerTransformer(rightPowerTransformer);
};
-- ###
-- # operations for target class FrequencyConverter
-- ##

-- get all elements of of type FrequencyConverter and ZTCF
var leftAllFrequencyConverter = __CIM.objectsOfType(_CIM::IEC61970::Wires::FrequencyConverter);
var rightAllFrequencyConverter = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZTCF);

-- theta join operation
rightAllFrequencyConverter->forEach(rightFrequencyConverter) {
	leftAllFrequencyConverter->map thetaJoin_FrequencyConverter_ZTCF_To_FrequencyConverter(rightFrequencyConverter);
};
-- ###
-- # operations for target class ACLineSegment
-- ##

-- get all elements of of type ACLineSegment and ZLIN
var leftAllACLineSegment = __CIM.objectsOfType(_CIM::IEC61970::Wires::ACLineSegment);
var rightAllACLineSegment = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZLIN);

-- theta join operation
rightAllACLineSegment->forEach(rightACLineSegment) {
	leftAllACLineSegment->map thetaJoin_ACLineSegment_ZLIN_To_ACLineSegment(rightACLineSegment);
};
-- ###
-- # operations for target class DCLineSegment
-- ##

-- get all elements of of type DCLineSegment and ZLIN
var leftAllDCLineSegment = __CIM.objectsOfType(_CIM::IEC61970::Wires::DCLineSegment);
var rightAllDCLineSegment = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZLIN);

-- theta join operation
rightAllDCLineSegment->forEach(rightDCLineSegment) {
	leftAllDCLineSegment->map thetaJoin_DCLineSegment_ZLIN_To_DCLineSegment(rightDCLineSegment);
};
-- ###
-- # operations for target class StaticVarCompensator
-- ##

-- get all elements of of type StaticVarCompensator and ZTCR
var leftAllStaticVarCompensator = __CIM.objectsOfType(_CIM::IEC61970::Wires::StaticVarCompensator);
var rightAllStaticVarCompensator = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZTCR);

-- theta join operation
rightAllStaticVarCompensator->forEach(rightStaticVarCompensator) {
	leftAllStaticVarCompensator->map thetaJoin_StaticVarCompensator_ZTCR_To_StaticVarCompensator(rightStaticVarCompensator);
};
-- ###
-- # operations for target class TapChanger
-- ##

-- get all elements of of type TapChanger and YLTC
var leftAllTapChanger = __CIM.objectsOfType(_CIM::IEC61970::Wires::TapChanger);
var rightAllTapChanger = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupY::YLTC);

-- theta join operation
rightAllTapChanger->forEach(rightTapChanger) {
	leftAllTapChanger->map thetaJoin_TapChanger_YLTC_To_TapChanger(rightTapChanger);
};
-- ###
-- # operations for target class Breaker
-- ##

-- get all elements of of type Breaker and XCBR
var leftAllBreaker = __CIM.objectsOfType(_CIM::IEC61970::Wires::Breaker);
var rightAllBreaker = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupX::XCBR);

-- theta join operation
rightAllBreaker->forEach(rightBreaker) {
	leftAllBreaker->map thetaJoin_Breaker_XCBR_To_Breaker(rightBreaker);
};
-- ###
-- # operations for target class ShuntCapacitorCompensator
-- ##

-- get all elements of of type ShuntCompensator and ZCAP
var leftAllShuntCapacitorCompensator = __CIM.objectsOfType(_CIM::IEC61970::Wires::ShuntCompensator);
var rightAllShuntCapacitorCompensator = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZCAP);

-- theta join operation
rightAllShuntCapacitorCompensator->forEach(rightShuntCapacitorCompensator) {
	leftAllShuntCapacitorCompensator->map thetaJoin_ShuntCompensator_ZCAP_To_ShuntCapacitorCompensator(rightShuntCapacitorCompensator);
};
-- ###
-- # operations for target class GeneratingUnit
-- ##

-- get all elements of of type GeneratingUnit and ZGEN
var leftAllGeneratingUnit = __CIM.objectsOfType(_CIM::IEC61970::Generation::Production::GeneratingUnit);
var rightAllGeneratingUnit = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZGEN);

-- theta join operation
rightAllGeneratingUnit->forEach(rightGeneratingUnit) {
	leftAllGeneratingUnit->map thetaJoin_GeneratingUnit_ZGEN_To_GeneratingUnit(rightGeneratingUnit);
};
-- ###
-- # operations for target class SynchronousMachine
-- ##

-- get all elements of of type SynchronousMachine and ZRRC
var leftAllSynchronousMachine = __CIM.objectsOfType(_CIM::IEC61970::Wires::SynchronousMachine);
var rightAllSynchronousMachine = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupZ::ZRRC);

-- theta join operation
rightAllSynchronousMachine->forEach(rightSynchronousMachine) {
	leftAllSynchronousMachine->map thetaJoin_SynchronousMachine_ZRRC_To_SynchronousMachine(rightSynchronousMachine);
};
-- ###
-- # operations for target class Connector
-- ##

-- get all elements of of type Connector and Connector
var leftAllConnector = __CIM.objectsOfType(_CIM::IEC61970::Wires::Connector);
var rightAllConnector = __CIM.objectsOfType(_CIM::IEC61970::Wires::Connector);

-- theta join operation
rightAllConnector->forEach(rightConnector) {
	leftAllConnector->map thetaJoin_Connector_Connector_To_Connector(rightConnector);
};
-- ###
-- # operations for target class Ground
-- ##

-- get all elements of of type Ground and Ground
var leftAllGround = __CIM.objectsOfType(_CIM::IEC61970::Wires::Ground);
var rightAllGround = __CIM.objectsOfType(_CIM::IEC61970::Wires::Ground);

-- theta join operation
rightAllGround->forEach(rightGround) {
	leftAllGround->map thetaJoin_Ground_Ground_To_Ground(rightGround);
};
-- ###
-- # operations for target class EnergyConsumer
-- ##

-- get all elements of of type EnergyConsumer and EnergyConsumer
var leftAllEnergyConsumer = __CIM.objectsOfType(_CIM::IEC61970::Wires::EnergyConsumer);
var rightAllEnergyConsumer = __CIM.objectsOfType(_CIM::IEC61970::Wires::EnergyConsumer);

-- theta join operation
rightAllEnergyConsumer->forEach(rightEnergyConsumer) {
	leftAllEnergyConsumer->map thetaJoin_EnergyConsumer_EnergyConsumer_To_EnergyConsumer(rightEnergyConsumer);
};
-- ###
-- # operations for target class Resistor
-- ##

-- get all elements of of type Resistor and Resistor
var leftAllResistor = __CIM.objectsOfType(_CIM::IEC61970::Wires::Resistor);
var rightAllResistor = __CIM.objectsOfType(_CIM::IEC61970::Wires::Resistor);

-- theta join operation
rightAllResistor->forEach(rightResistor) {
	leftAllResistor->map thetaJoin_Resistor_Resistor_To_Resistor(rightResistor);
};
-- ###
-- # operations for target class RectifierInverter
-- ##

-- get all elements of of type RectifierInverter and RectifierInverter
var leftAllRectifierInverter = __CIM.objectsOfType(_CIM::IEC61970::Wires::RectifierInverter);
var rightAllRectifierInverter = __CIM.objectsOfType(_CIM::IEC61970::Wires::RectifierInverter);

-- theta join operation
rightAllRectifierInverter->forEach(rightRectifierInverter) {
	leftAllRectifierInverter->map thetaJoin_RectifierInverter_RectifierInverter_To_RectifierInverter(rightRectifierInverter);
};
-- ###
-- # operations for target class CurrentTransformer
-- ##

-- get all elements of of type CurrentTransformer and TCTR
var leftAllCurrentTransformer = __CIM.objectsOfType(_CIM::IEC61970::Meas::CurrentTransformer);
var rightAllCurrentTransformer = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupT::TCTR);

-- theta join operation
rightAllCurrentTransformer->forEach(rightCurrentTransformer) {
	leftAllCurrentTransformer->map thetaJoin_CurrentTransformer_TCTR_To_CurrentTransformer(rightCurrentTransformer);
};
-- ###
-- # operations for target class VoltageTransformer
-- ##

-- get all elements of of type PotentialTransformer and TVTR
var leftAllVoltageTransformer = __CIM.objectsOfType(_CIM::IEC61970::Meas::PotentialTransformer);
var rightAllVoltageTransformer = __substationStandard.objectsOfType(_substationStandard::LNNodes::LNGroupT::TVTR);

-- theta join operation
rightAllVoltageTransformer->forEach(rightVoltageTransformer) {
	leftAllVoltageTransformer->map thetaJoin_PotentialTransformer_TVTR_To_VoltageTransformer(rightVoltageTransformer);
};


	-- keep outgoing references


	var refAllLocation_92c1a0e4_4975_4039_b5a1_cf48f7d24f86 = __jointarget.objectsOfType(_jointarget::Switch);
	refAllLocation_92c1a0e4_4975_4039_b5a1_cf48f7d24f86->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_50b3d417_be21_4fa8_a38a_fae5facd3b03 = __jointarget.objectsOfType(_jointarget::Switch);
	refAllEquipmentContainer_50b3d417_be21_4fa8_a38a_fae5facd3b03->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_d16bb890_0d45_4229_9c4c_61405561f2e9 = __jointarget.objectsOfType(_jointarget::Switch);
	refAllBaseVoltage_d16bb890_0d45_4229_9c4c_61405561f2e9->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_db29f503_77a7_4381_8585_0affabc2f284 = __jointarget.objectsOfType(_jointarget::Switch);
	refAllTerminals_db29f503_77a7_4381_8585_0affabc2f284->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_345b8c8d_f7d0_433e_a8ee_563c4c4441f7 = __jointarget.objectsOfType(_jointarget::PowerTransformer);
	refAllLocation_345b8c8d_f7d0_433e_a8ee_563c4c4441f7->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_95cdd92f_e4bc_4f7a_ad9a_5b0d73ae1aba = __jointarget.objectsOfType(_jointarget::PowerTransformer);
	refAllEquipmentContainer_95cdd92f_e4bc_4f7a_ad9a_5b0d73ae1aba->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


/*	var refAllTransformerWindings_1c693d98_93a8_4c22_aff3_957746fac0c8 = __jointarget.objectsOfType(_jointarget::PowerTransformer);
	refAllTransformerWindings_1c693d98_93a8_4c22_aff3_957746fac0c8->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Wires::PowerTransformer)->collect(TransformerWindings)->selectByKind(_CIM::IEC61970::Wires::TransformerWinding)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_TransformerWindings(refElem.resolveone(_jointarget::TransformerWinding));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_TransformerWindings(refElem);
			}endif;
			refElem.resolveone(_jointarget::TransformerWinding).map trace_keepOutgoing_TransformerWindings(refElem);
		};
	};*/
	-- keep outgoing references


	var refAllLocation_7106c3ce_45aa_40ec_a56a_71318e5c44e9 = __jointarget.objectsOfType(_jointarget::FrequencyConverter);
	refAllLocation_7106c3ce_45aa_40ec_a56a_71318e5c44e9->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_04ce07ea_67f8_42bc_89bf_a94a7c72edf4 = __jointarget.objectsOfType(_jointarget::FrequencyConverter);
	refAllEquipmentContainer_04ce07ea_67f8_42bc_89bf_a94a7c72edf4->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_6eabd16d_373f_4b55_b6c0_8da7ffaf9895 = __jointarget.objectsOfType(_jointarget::FrequencyConverter);
	refAllBaseVoltage_6eabd16d_373f_4b55_b6c0_8da7ffaf9895->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_c8035166_7b57_4548_a0b7_bb425e308bb8 = __jointarget.objectsOfType(_jointarget::FrequencyConverter);
	refAllTerminals_c8035166_7b57_4548_a0b7_bb425e308bb8->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_baf295b7_8a05_4d01_bcbf_1530e1e33448 = __jointarget.objectsOfType(_jointarget::ACLineSegment);
	refAllLocation_baf295b7_8a05_4d01_bcbf_1530e1e33448->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_68d91fe1_c595_4bd4_a513_c47a8d957663 = __jointarget.objectsOfType(_jointarget::ACLineSegment);
	refAllEquipmentContainer_68d91fe1_c595_4bd4_a513_c47a8d957663->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_4f2582df_8439_48c1_8554_9a7086c246db = __jointarget.objectsOfType(_jointarget::ACLineSegment);
	refAllBaseVoltage_4f2582df_8439_48c1_8554_9a7086c246db->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_811570c5_a7ba_42f9_92f6_0bbd5abd09ab = __jointarget.objectsOfType(_jointarget::ACLineSegment);
	refAllTerminals_811570c5_a7ba_42f9_92f6_0bbd5abd09ab->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_27cb8c59_b6d8_4f8e_85d7_a8bf333cdec0 = __jointarget.objectsOfType(_jointarget::DCLineSegment);
	refAllLocation_27cb8c59_b6d8_4f8e_85d7_a8bf333cdec0->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_b5ab1219_52f8_4b4f_92d5_4914304d4e62 = __jointarget.objectsOfType(_jointarget::DCLineSegment);
	refAllEquipmentContainer_b5ab1219_52f8_4b4f_92d5_4914304d4e62->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_58284d52_d884_439d_aa96_32527c3518ba = __jointarget.objectsOfType(_jointarget::DCLineSegment);
	refAllBaseVoltage_58284d52_d884_439d_aa96_32527c3518ba->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_4b0f5728_6ecc_49f9_86b1_90bc4e7ebff7 = __jointarget.objectsOfType(_jointarget::DCLineSegment);
	refAllTerminals_4b0f5728_6ecc_49f9_86b1_90bc4e7ebff7->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_5f96976b_556e_4294_97fa_64ea67ab5701 = __jointarget.objectsOfType(_jointarget::StaticVarCompensator);
	refAllLocation_5f96976b_556e_4294_97fa_64ea67ab5701->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_e299ecf2_1c37_4a43_ba86_95605683626d = __jointarget.objectsOfType(_jointarget::StaticVarCompensator);
	refAllEquipmentContainer_e299ecf2_1c37_4a43_ba86_95605683626d->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_20688526_7ec3_451e_92a1_169e75c51b7c = __jointarget.objectsOfType(_jointarget::StaticVarCompensator);
	refAllBaseVoltage_20688526_7ec3_451e_92a1_169e75c51b7c->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	/*var refAllTerminals_ad04d89f_5b3f_46f2_b58f_9203e63c7077 = __jointarget.objectsOfType(_jointarget::StaticVarCompensator);
	refAllTerminals_ad04d89f_5b3f_46f2_b58f_9203e63c7077->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};*/
	-- keep outgoing references


	var refAllLocation_b14a5687_09f3_4568_a1ae_e1ce63a0db64 = __jointarget.objectsOfType(_jointarget::TapChanger);
	refAllLocation_b14a5687_09f3_4568_a1ae_e1ce63a0db64->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_87c8f131_3974_4c0c_a3c5_1d305b306d71 = __jointarget.objectsOfType(_jointarget::Breaker);
	refAllLocation_87c8f131_3974_4c0c_a3c5_1d305b306d71->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_3046a2d2_0c35_4c46_8950_fdac1b32c053 = __jointarget.objectsOfType(_jointarget::Breaker);
	refAllEquipmentContainer_3046a2d2_0c35_4c46_8950_fdac1b32c053->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_1c7dc44f_9eca_4297_bc5f_b0684d3a1a17 = __jointarget.objectsOfType(_jointarget::Breaker);
	refAllBaseVoltage_1c7dc44f_9eca_4297_bc5f_b0684d3a1a17->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_4cea3cb1_00df_4f6f_8805_196af3901996 = __jointarget.objectsOfType(_jointarget::Breaker);
	refAllTerminals_4cea3cb1_00df_4f6f_8805_196af3901996->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_61d63b1d_c6d0_4146_a36e_1ef0babf3132 = __jointarget.objectsOfType(_jointarget::ShuntCapacitorCompensator);
	refAllLocation_61d63b1d_c6d0_4146_a36e_1ef0babf3132->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_a9e03697_e684_4dc6_890c_4c0da32ab508 = __jointarget.objectsOfType(_jointarget::ShuntCapacitorCompensator);
	refAllEquipmentContainer_a9e03697_e684_4dc6_890c_4c0da32ab508->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_fea64f24_9d8f_47d7_b9fb_b9063dcd0659 = __jointarget.objectsOfType(_jointarget::ShuntCapacitorCompensator);
	refAllBaseVoltage_fea64f24_9d8f_47d7_b9fb_b9063dcd0659->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_4fb194df_bbf9_440e_bd83_025f8bb80b8e = __jointarget.objectsOfType(_jointarget::ShuntCapacitorCompensator);
	refAllTerminals_4fb194df_bbf9_440e_bd83_025f8bb80b8e->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_7d5b074c_bd7f_4cf3_acd8_062e43506490 = __jointarget.objectsOfType(_jointarget::Connector);
	refAllLocation_7d5b074c_bd7f_4cf3_acd8_062e43506490->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_3a3bf5e9_762b_4bd4_8178_1ddb85c168ca = __jointarget.objectsOfType(_jointarget::Connector);
	refAllEquipmentContainer_3a3bf5e9_762b_4bd4_8178_1ddb85c168ca->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_c0c45681_3850_4f24_b9c7_c4fc647455ef = __jointarget.objectsOfType(_jointarget::Connector);
	refAllBaseVoltage_c0c45681_3850_4f24_b9c7_c4fc647455ef->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_d0fc6606_249a_4a1d_9f1a_a8c7b275560c = __jointarget.objectsOfType(_jointarget::Connector);
	refAllTerminals_d0fc6606_249a_4a1d_9f1a_a8c7b275560c->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_a2baa6d0_be8f_4967_a6ae_eb01087b2141 = __jointarget.objectsOfType(_jointarget::Ground);
	refAllLocation_a2baa6d0_be8f_4967_a6ae_eb01087b2141->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_3867bba5_efc8_4137_9972_8c37ff554223 = __jointarget.objectsOfType(_jointarget::Ground);
	refAllEquipmentContainer_3867bba5_efc8_4137_9972_8c37ff554223->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_180c7f33_e698_4411_9ae7_16384eafa4c3 = __jointarget.objectsOfType(_jointarget::Ground);
	refAllBaseVoltage_180c7f33_e698_4411_9ae7_16384eafa4c3->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_ce4a57c8_66a9_4452_9c3c_f72b92d0d91d = __jointarget.objectsOfType(_jointarget::Ground);
	refAllTerminals_ce4a57c8_66a9_4452_9c3c_f72b92d0d91d->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_50ac6965_f08e_4bce_ae2f_4d4e31988103 = __jointarget.objectsOfType(_jointarget::EnergyConsumer);
	refAllLocation_50ac6965_f08e_4bce_ae2f_4d4e31988103->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_07e6832d_dfc3_46a3_8ff6_28c6649ede30 = __jointarget.objectsOfType(_jointarget::EnergyConsumer);
	refAllEquipmentContainer_07e6832d_dfc3_46a3_8ff6_28c6649ede30->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_587c092d_7035_4141_bfd6_0bdb07303c41 = __jointarget.objectsOfType(_jointarget::EnergyConsumer);
	refAllBaseVoltage_587c092d_7035_4141_bfd6_0bdb07303c41->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_811e08c6_86d7_4beb_a292_3238002caf3e = __jointarget.objectsOfType(_jointarget::EnergyConsumer);
	refAllTerminals_811e08c6_86d7_4beb_a292_3238002caf3e->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_02064c11_e264_4c89_8ae7_e132158cd1f2 = __jointarget.objectsOfType(_jointarget::Resistor);
	refAllLocation_02064c11_e264_4c89_8ae7_e132158cd1f2->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_b7760a3d_fead_4a2a_9c25_93fb37cfd28a = __jointarget.objectsOfType(_jointarget::Resistor);
	refAllEquipmentContainer_b7760a3d_fead_4a2a_9c25_93fb37cfd28a->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_385004ae_cb18_4ba9_af01_33ab994c4076 = __jointarget.objectsOfType(_jointarget::Resistor);
	refAllBaseVoltage_385004ae_cb18_4ba9_af01_33ab994c4076->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_97fb514b_50f7_46c4_a6bc_409fb37355e4 = __jointarget.objectsOfType(_jointarget::Resistor);
	refAllTerminals_97fb514b_50f7_46c4_a6bc_409fb37355e4->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_01b7644b_3062_4528_92df_bccf8574028a = __jointarget.objectsOfType(_jointarget::RectifierInverter);
	refAllLocation_01b7644b_3062_4528_92df_bccf8574028a->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_c9151c71_9724_40e1_9187_f25fab312949 = __jointarget.objectsOfType(_jointarget::RectifierInverter);
	refAllEquipmentContainer_c9151c71_9724_40e1_9187_f25fab312949->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_bd420f30_edea_4d07_a0c9_0a3ea1b362e9 = __jointarget.objectsOfType(_jointarget::RectifierInverter);
	refAllBaseVoltage_bd420f30_edea_4d07_a0c9_0a3ea1b362e9->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_682008cd_6e18_4691_9e28_98758775a8d4 = __jointarget.objectsOfType(_jointarget::RectifierInverter);
	refAllTerminals_682008cd_6e18_4691_9e28_98758775a8d4->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_a563ca4a_44e4_4079_b8e1_52b16fc6bcb7 = __jointarget.objectsOfType(_jointarget::CurrentTransformer);
	refAllLocation_a563ca4a_44e4_4079_b8e1_52b16fc6bcb7->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_2751e2b6_6e10_47b6_9e8c_4292ca46d89d = __jointarget.objectsOfType(_jointarget::CurrentTransformer);
	refAllEquipmentContainer_2751e2b6_6e10_47b6_9e8c_4292ca46d89d->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_48a620b8_7235_42e2_8f03_ec7730040c0a = __jointarget.objectsOfType(_jointarget::VoltageTransformer);
	refAllLocation_48a620b8_7235_42e2_8f03_ec7730040c0a->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_fc5cffdc_b13b_4fff_bdb3_0ed841c7b3bd = __jointarget.objectsOfType(_jointarget::VoltageTransformer);
	refAllEquipmentContainer_fc5cffdc_b13b_4fff_bdb3_0ed841c7b3bd->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllSubstation_2f20d990_8ddd_4645_96b0_8d55c1b1c987 = __jointarget.objectsOfType(_jointarget::VoltageLevel);
	refAllSubstation_2f20d990_8ddd_4645_96b0_8d55c1b1c987->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::VoltageLevel)->collect(Substation)->selectByKind(_CIM::IEC61970::Core::Substation)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Substation(refElem.resolveone(_jointarget::Substation));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Substation(refElem);
			}endif;
			refElem.resolveone(_jointarget::Substation).map trace_keepOutgoing_Substation(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_af5cb939_0c5e_4497_b66f_2c38d615c64c = __jointarget.objectsOfType(_jointarget::TransformerWinding);
	refAllBaseVoltage_af5cb939_0c5e_4497_b66f_2c38d615c64c->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_997b8771_3094_4c54_a91e_24e077902cb0 = __jointarget.objectsOfType(_jointarget::TransformerWinding);
	refAllTerminals_997b8771_3094_4c54_a91e_24e077902cb0->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllPhaseTapChanger_00272f3e_0709_45d1_85cc_cae000444555 = __jointarget.objectsOfType(_jointarget::TransformerWinding);
	refAllPhaseTapChanger_00272f3e_0709_45d1_85cc_cae000444555->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Wires::TransformerWinding)->collect(PhaseTapChanger)->selectByKind(_CIM::IEC61970::Wires::PhaseTapChanger)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_PhaseTapChanger(refElem.resolveone(_jointarget::PhaseTapChanger));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_PhaseTapChanger(refElem);
			}endif;
			refElem.resolveone(_jointarget::PhaseTapChanger).map trace_keepOutgoing_PhaseTapChanger(refElem);
		};
	};
	-- keep outgoing references


	var refAllRatioTapChanger_b576a124_a9e2_4400_8559_4ff6aeee43c2 = __jointarget.objectsOfType(_jointarget::TransformerWinding);
	refAllRatioTapChanger_b576a124_a9e2_4400_8559_4ff6aeee43c2->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Wires::TransformerWinding)->collect(RatioTapChanger)->selectByKind(_CIM::IEC61970::Wires::RatioTapChanger)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_RatioTapChanger(refElem.resolveone(_jointarget::RatioTapChanger));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_RatioTapChanger(refElem);
			}endif;
			refElem.resolveone(_jointarget::RatioTapChanger).map trace_keepOutgoing_RatioTapChanger(refElem);
		};
	};
	-- keep outgoing references


	var refAllTransformerWinding_a0d73b89_9b0b_418c_bab2_82886d2c0fb5 = __jointarget.objectsOfType(_jointarget::PhaseTapChanger);
	refAllTransformerWinding_a0d73b89_9b0b_418c_bab2_82886d2c0fb5->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Wires::PhaseTapChanger)->collect(TransformerWinding)->selectByKind(_CIM::IEC61970::Wires::TransformerWinding)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_TransformerWinding(refElem.resolveone(_jointarget::TransformerWinding));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_TransformerWinding(refElem);
			}endif;
			refElem.resolveone(_jointarget::TransformerWinding).map trace_keepOutgoing_TransformerWinding(refElem);
		};
	};
	-- keep outgoing references


	var refAllTransformerWinding_37c5777a_5ccf_4f9f_9bb9_97860f5b09d9 = __jointarget.objectsOfType(_jointarget::RatioTapChanger);
	refAllTransformerWinding_37c5777a_5ccf_4f9f_9bb9_97860f5b09d9->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Wires::RatioTapChanger)->collect(TransformerWinding)->selectByKind(_CIM::IEC61970::Wires::TransformerWinding)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_TransformerWinding(refElem.resolveone(_jointarget::TransformerWinding));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_TransformerWinding(refElem);
			}endif;
			refElem.resolveone(_jointarget::TransformerWinding).map trace_keepOutgoing_TransformerWinding(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_aa028b8b_80ba_44a3_9656_c449bf7e0971 = __jointarget.objectsOfType(_jointarget::SynchronousMachine);
	refAllLocation_aa028b8b_80ba_44a3_9656_c449bf7e0971->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_2bfca27a_a3b6_4d1e_be0d_7fa48f861362 = __jointarget.objectsOfType(_jointarget::SynchronousMachine);
	refAllEquipmentContainer_2bfca27a_a3b6_4d1e_be0d_7fa48f861362->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllBaseVoltage_1e0d42c2_3b72_42b6_bf8f_4b4937a7f2b7 = __jointarget.objectsOfType(_jointarget::SynchronousMachine);
	refAllBaseVoltage_1e0d42c2_3b72_42b6_bf8f_4b4937a7f2b7->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(BaseVoltage)->selectByKind(_CIM::IEC61970::Core::BaseVoltage)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_BaseVoltage(refElem.resolveone(_jointarget::BaseVoltage));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_BaseVoltage(refElem);
			}endif;
			refElem.resolveone(_jointarget::BaseVoltage).map trace_keepOutgoing_BaseVoltage(refElem);
		};
	};
	-- keep outgoing references


	var refAllTerminals_367e70a1_27bf_40d5_8508_124d02119f86 = __jointarget.objectsOfType(_jointarget::SynchronousMachine);
	refAllTerminals_367e70a1_27bf_40d5_8508_124d02119f86->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::ConductingEquipment)->collect(Terminals)->selectByKind(_CIM::IEC61970::Core::Terminal)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Terminals(refElem.resolveone(_jointarget::Terminal));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Terminals(refElem);
			}endif;
			refElem.resolveone(_jointarget::Terminal).map trace_keepOutgoing_Terminals(refElem);
		};
	};
	-- keep outgoing references


	var refAllGeneratingUnit_c16e4874_39db_4330_96e3_04dcc3d28552 = __jointarget.objectsOfType(_jointarget::SynchronousMachine);
	refAllGeneratingUnit_c16e4874_39db_4330_96e3_04dcc3d28552->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Wires::SynchronousMachine)->collect(GeneratingUnit)->selectByKind(_CIM::IEC61970::Generation::Production::GeneratingUnit)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_GeneratingUnit(refElem.resolveone(_jointarget::GeneratingUnit));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_GeneratingUnit(refElem);
			}endif;
			refElem.resolveone(_jointarget::GeneratingUnit).map trace_keepOutgoing_GeneratingUnit(refElem);
		};
	};
	-- keep outgoing references


	var refAllLocation_49698054_e27c_4b4b_8075_e79e11e4f299 = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
	refAllLocation_49698054_e27c_4b4b_8075_e79e11e4f299->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::PowerSystemResource)->collect(Location)->selectByKind(_CIM::IEC61968::Common::Location)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Location(refElem.resolveone(_jointarget::Location));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Location(refElem);
			}endif;
			refElem.resolveone(_jointarget::Location).map trace_keepOutgoing_Location(refElem);
		};
	};
	-- keep outgoing references


	var refAllEquipmentContainer_e4bb60eb_ce69_4fcc_9d56_22ec153f308e = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
	refAllEquipmentContainer_e4bb60eb_ce69_4fcc_9d56_22ec153f308e->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Equipment)->collect(EquipmentContainer)->selectByKind(_CIM::IEC61970::Core::EquipmentContainer)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_EquipmentContainer(refElem.resolveone(_jointarget::EquipmentContainer));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_EquipmentContainer(refElem);
			}endif;
			refElem.resolveone(_jointarget::EquipmentContainer).map trace_keepOutgoing_EquipmentContainer(refElem);
		};
	};
	-- keep outgoing references


	var refAllSynchronousMachines_a678c486_6bd2_4918_8856_36fe6d6d491d = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
	refAllSynchronousMachines_a678c486_6bd2_4918_8856_36fe6d6d491d->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Generation::Production::GeneratingUnit)->collect(SynchronousMachines)->selectByKind(_CIM::IEC61970::Wires::SynchronousMachine)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_SynchronousMachines(refElem.resolveone(_jointarget::SynchronousMachine));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_SynchronousMachines(refElem);
			}endif;
			refElem.resolveone(_jointarget::SynchronousMachine).map trace_keepOutgoing_SynchronousMachines(refElem);
		};
	};
	-- keep outgoing references


	var refAllConnectivityNode_f3c6a726_af16_4f2f_833c_6cc68bfde04d = __jointarget.objectsOfType(_jointarget::Terminal);
	refAllConnectivityNode_f3c6a726_af16_4f2f_833c_6cc68bfde04d->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61970::Core::Terminal)->collect(ConnectivityNode)->selectByKind(_CIM::IEC61970::Core::ConnectivityNode)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_ConnectivityNode(refElem.resolveone(_jointarget::ConnectivityNode));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_ConnectivityNode(refElem);
			}endif;
			refElem.resolveone(_jointarget::ConnectivityNode).map trace_keepOutgoing_ConnectivityNode(refElem);
		};
	};
	-- keep outgoing references


	var refAllPosition_f9885969_80e5_4cf5_a964_13ade346ac18 = __jointarget.objectsOfType(_jointarget::Location);
	refAllPosition_f9885969_80e5_4cf5_a964_13ade346ac18->forEach(elem) {
		elem.invresolve()->selectByKind(_CIM::IEC61968::Common::Location)->collect(Position)->selectByKind(_CIM::IEC61968::Common::PositionPoint)->forEach(refElem) {
			-- if source object at the end of the reference has already been mapped, update the reference with the mapped element
			if (refElem.resolve()->notEmpty()) then {
				elem.map update_keepOutgoing_Position(refElem.resolveone(_jointarget::PositionPoint));
			-- if it has not been mapped yet, create new element and update reference
			} else {
				elem.map update_keepOutgoing_and_create_Position(refElem);
			}endif;
			refElem.resolveone(_jointarget::PositionPoint).map trace_keepOutgoing_Position(refElem);
		};
	};



	-- keep attributes
	var keepAttSwitch_94ea6f99_ed5b_4bdc_b86e_4ee9a2a9fb0b = __jointarget.objectsOfType(_jointarget::Switch);
			keepAttSwitch_94ea6f99_ed5b_4bdc_b86e_4ee9a2a9fb0b->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttSwitch_94ea6f99_ed5b_4bdc_b86e_4ee9a2a9fb0b->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Switch);
				elem.map update_attribute_normalOpen(sourceClass.normalOpen)	
				};
	var keepAttPowerTransformer_8296b601_8a96_4cb3_ab33_28112758596c = __jointarget.objectsOfType(_jointarget::PowerTransformer);
			keepAttPowerTransformer_8296b601_8a96_4cb3_ab33_28112758596c->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
	var keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9 = __jointarget.objectsOfType(_jointarget::FrequencyConverter);
			keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::FrequencyConverter);
				elem.map update_attribute_frequency(sourceClass.frequency)	
				};
			keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::FrequencyConverter);
				elem.map update_attribute_maxP(sourceClass.maxP)	
				};
			keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::FrequencyConverter);
				elem.map update_attribute_minP(sourceClass.minP)	
				};
			keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::FrequencyConverter);
				elem.map update_attribute_maxU(sourceClass.maxU)	
				};
			keepAttFrequencyConverter_487e1dac_f049_466d_b787_73236d1caeb9->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::FrequencyConverter);
				elem.map update_attribute_minU(sourceClass.minU)	
				};
	var keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316 = __jointarget.objectsOfType(_jointarget::ACLineSegment);
			keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Conductor);
				elem.map update_attribute_length(sourceClass.length)	
				};
			keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ACLineSegment);
				elem.map update_attribute_gch(sourceClass.gch)	
				};
			keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ACLineSegment);
				elem.map update_attribute_r(sourceClass.r)	
				};
			keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ACLineSegment);
				elem.map update_attribute_x(sourceClass.x)	
				};
			keepAttACLineSegment_8fe48d6b_cccd_464b_bd7f_531339907316->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ACLineSegment);
				elem.map update_attribute_bch(sourceClass.bch)	
				};
	var keepAttDCLineSegment_fc12ce4a_0900_4e8a_a9b0_8f02371d550d = __jointarget.objectsOfType(_jointarget::DCLineSegment);
			keepAttDCLineSegment_fc12ce4a_0900_4e8a_a9b0_8f02371d550d->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttDCLineSegment_fc12ce4a_0900_4e8a_a9b0_8f02371d550d->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Conductor);
				elem.map update_attribute_length(sourceClass.length)	
				};
			keepAttDCLineSegment_fc12ce4a_0900_4e8a_a9b0_8f02371d550d->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::DCLineSegment);
				elem.map update_attribute_dcSegmentResistance(sourceClass.dcSegmentResistance)	
				};
			keepAttDCLineSegment_fc12ce4a_0900_4e8a_a9b0_8f02371d550d->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::DCLineSegment);
				elem.map update_attribute_dcSegmentInductance(sourceClass.dcSegmentInductance)	
				};
	var keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f = __jointarget.objectsOfType(_jointarget::StaticVarCompensator);
			keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::StaticVarCompensator);
				elem.map update_attribute_sVCControlMode(sourceClass.sVCControlMode)	
				};
			keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::StaticVarCompensator);
				elem.map update_attribute_inductiveRating(sourceClass.inductiveRating)	
				};
			keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::StaticVarCompensator);
				elem.map update_attribute_capacitiveRating(sourceClass.capacitiveRating)	
				};
			keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::StaticVarCompensator);
				elem.map update_attribute_voltageSetPoint(sourceClass.voltageSetPoint)	
				};
			keepAttStaticVarCompensator_68e6a21f_bf83_40d8_a870_10cacdf3429f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::StaticVarCompensator);
				elem.map update_attribute_slope(sourceClass.slope)	
				};
	var keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761 = __jointarget.objectsOfType(_jointarget::TapChanger);
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_initialDelay(sourceClass.initialDelay)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_subsequentDelay(sourceClass.subsequentDelay)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_ltcFlag(sourceClass.ltcFlag)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_regulationStatus(sourceClass.regulationStatus)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_neutralStep(sourceClass.neutralStep)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_neutralU(sourceClass.neutralU)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_lowStep(sourceClass.lowStep)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_highStep(sourceClass.highStep)	
				};
			keepAttTapChanger_183642bd_5c1f_4b17_8f7c_fae7d2139761->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_normalStep(sourceClass.normalStep)	
				};
	var keepAttBreaker_b37b45d1_a51b_40f3_97c2_b1cb0bac24d6 = __jointarget.objectsOfType(_jointarget::Breaker);
			keepAttBreaker_b37b45d1_a51b_40f3_97c2_b1cb0bac24d6->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttBreaker_b37b45d1_a51b_40f3_97c2_b1cb0bac24d6->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Switch);
				elem.map update_attribute_normalOpen(sourceClass.normalOpen)	
				};
			keepAttBreaker_b37b45d1_a51b_40f3_97c2_b1cb0bac24d6->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Breaker);
				elem.map update_attribute_ratedCurrent(sourceClass.ratedCurrent)	
				};
			keepAttBreaker_b37b45d1_a51b_40f3_97c2_b1cb0bac24d6->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Breaker);
				elem.map update_attribute_inTransitTime(sourceClass.inTransitTime)	
				};
	var keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713 = __jointarget.objectsOfType(_jointarget::ShuntCapacitorCompensator);
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_normalSections(sourceClass.normalSections)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_minU(sourceClass.minU)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_nomQ(sourceClass.nomQ)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_nomU(sourceClass.nomU)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_maximumSections(sourceClass.maximumSections)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_maxU(sourceClass.maxU)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_bPerSection(sourceClass.bPerSection)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_gPerSection(sourceClass.gPerSection)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_voltageSensitivity(sourceClass.voltageSensitivity)	
				};
			keepAttShuntCapacitorCompensator_d74be247_b006_4fc0_9a68_185108400713->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::ShuntCompensator);
				elem.map update_attribute_reactivePerSection(sourceClass.reactivePerSection)	
				};
	var keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764 = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_highControlLimit(sourceClass.highControlLimit)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_autoCntrlMarginP(sourceClass.autoCntrlMarginP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_ratedGrossMaxP(sourceClass.ratedGrossMaxP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_allocSpinResP(sourceClass.allocSpinResP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_stepChange(sourceClass.stepChange)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_startupCost(sourceClass.startupCost)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_nominalP(sourceClass.nominalP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_energyMinP(sourceClass.energyMinP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_initialP(sourceClass.initialP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_minEconomicP(sourceClass.minEconomicP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_maxEconomicP(sourceClass.maxEconomicP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_ratedGrossMinP(sourceClass.ratedGrossMinP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_minOperatingP(sourceClass.minOperatingP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_baseP(sourceClass.baseP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_maxOperatingP(sourceClass.maxOperatingP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_ratedNetMaxP(sourceClass.ratedNetMaxP)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_efficiency(sourceClass.efficiency)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_controlDeadband(sourceClass.controlDeadband)	
				};
			keepAttGeneratingUnit_759988e8_701d_4070_8ea9_f37ffe1f7764->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
				elem.map update_attribute_normalPF(sourceClass.normalPF)	
				};
	var keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1 = __jointarget.objectsOfType(_jointarget::SynchronousMachine);
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_xDirectSync(sourceClass.xDirectSync)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_xQuadTrans(sourceClass.xQuadTrans)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_xQuadSubtrans(sourceClass.xQuadSubtrans)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_minQ(sourceClass.minQ)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_maxU(sourceClass.maxU)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_maxQ(sourceClass.maxQ)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_type(sourceClass.type)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_r2(sourceClass.r2)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_x2(sourceClass.x2)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_r(sourceClass.r)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_x(sourceClass.x)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_xQuadSync(sourceClass.xQuadSync)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_ratedS(sourceClass.ratedS)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_minU(sourceClass.minU)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_xDirectTrans(sourceClass.xDirectTrans)	
				};
			keepAttSynchronousMachine_13afa9a1_451d_4990_81b2_ee80d3487bc1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::SynchronousMachine);
				elem.map update_attribute_baseQ(sourceClass.baseQ)	
				};
	var keepAttConnector_134c591f_0eee_4fc9_abf7_412d6e94abb7 = __jointarget.objectsOfType(_jointarget::Connector);
			keepAttConnector_134c591f_0eee_4fc9_abf7_412d6e94abb7->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
	var keepAttGround_2adb3174_f1ca_4fad_9da8_318fe0f6e6e8 = __jointarget.objectsOfType(_jointarget::Ground);
			keepAttGround_2adb3174_f1ca_4fad_9da8_318fe0f6e6e8->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
	var keepAttEnergyConsumer_6cd1ba50_8a47_4724_b764_73bc4eadd7ab = __jointarget.objectsOfType(_jointarget::EnergyConsumer);
			keepAttEnergyConsumer_6cd1ba50_8a47_4724_b764_73bc4eadd7ab->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttEnergyConsumer_6cd1ba50_8a47_4724_b764_73bc4eadd7ab->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::EnergyConsumer);
				elem.map update_attribute_pfixed(sourceClass.pfixed)	
				};
			keepAttEnergyConsumer_6cd1ba50_8a47_4724_b764_73bc4eadd7ab->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::EnergyConsumer);
				elem.map update_attribute_qfixedPct(sourceClass.qfixedPct)	
				};
			keepAttEnergyConsumer_6cd1ba50_8a47_4724_b764_73bc4eadd7ab->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::EnergyConsumer);
				elem.map update_attribute_pfixedPct(sourceClass.pfixedPct)	
				};
			keepAttEnergyConsumer_6cd1ba50_8a47_4724_b764_73bc4eadd7ab->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::EnergyConsumer);
				elem.map update_attribute_qfixed(sourceClass.qfixed)	
				};
	var keepAttResistor_250da9d0_4ada_4d3d_91b2_80cfee1c8c73 = __jointarget.objectsOfType(_jointarget::Resistor);
			keepAttResistor_250da9d0_4ada_4d3d_91b2_80cfee1c8c73->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
	var keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889 = __jointarget.objectsOfType(_jointarget::RectifierInverter);
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_minCompoundVoltage(sourceClass.minCompoundVoltage)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_minP(sourceClass.minP)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_maxU(sourceClass.maxU)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_operatingMode(sourceClass.operatingMode)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_frequency(sourceClass.frequency)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_maxP(sourceClass.maxP)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_ratedU(sourceClass.ratedU)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_minU(sourceClass.minU)	
				};
			keepAttRectifierInverter_5331ee78_2c97_4dfd_8a9a_4b3b9c184889->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RectifierInverter);
				elem.map update_attribute_compoundResistance(sourceClass.compoundResistance)	
				};
	var keepAttCurrentTransformer_64dfa7d2_2062_43f7_a63f_efdd80a807c5 = __jointarget.objectsOfType(_jointarget::CurrentTransformer);
			keepAttCurrentTransformer_64dfa7d2_2062_43f7_a63f_efdd80a807c5->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttCurrentTransformer_64dfa7d2_2062_43f7_a63f_efdd80a807c5->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Meas::CurrentTransformer);
				elem.map update_attribute_maxRatio(sourceClass.maxRatio)	
				};
	var keepAttVoltageTransformer_7308d354_33fe_4c54_be5c_73619f40f8a8 = __jointarget.objectsOfType(_jointarget::VoltageTransformer);
			keepAttVoltageTransformer_7308d354_33fe_4c54_be5c_73619f40f8a8->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttVoltageTransformer_7308d354_33fe_4c54_be5c_73619f40f8a8->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Meas::PotentialTransformer);
				elem.map update_attribute_nominalRatio(sourceClass.nominalRatio)	
				};
	var keepAttFuse_30fa1abf_2228_4704_96c9_90d09ce8b994 = __jointarget.objectsOfType(_jointarget::Fuse);
			keepAttFuse_30fa1abf_2228_4704_96c9_90d09ce8b994->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttFuse_30fa1abf_2228_4704_96c9_90d09ce8b994->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Switch);
				elem.map update_attribute_normalOpen(sourceClass.normalOpen)	
				};
			keepAttFuse_30fa1abf_2228_4704_96c9_90d09ce8b994->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::Fuse);
				elem.map update_attribute_ratingCurrent(sourceClass.ratingCurrent)	
				};
	var keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134 = __jointarget.objectsOfType(_jointarget::PhaseTapChanger);
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_initialDelay(sourceClass.initialDelay)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_subsequentDelay(sourceClass.subsequentDelay)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_ltcFlag(sourceClass.ltcFlag)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_regulationStatus(sourceClass.regulationStatus)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_neutralStep(sourceClass.neutralStep)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_neutralU(sourceClass.neutralU)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_lowStep(sourceClass.lowStep)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_highStep(sourceClass.highStep)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_normalStep(sourceClass.normalStep)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_phaseTapChangerType(sourceClass.phaseTapChangerType)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_windingConnectionAngle(sourceClass.windingConnectionAngle)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_stepPhaseShiftIncrement(sourceClass.stepPhaseShiftIncrement)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_voltageStepIncrementOutOfPhase(sourceClass.voltageStepIncrementOutOfPhase)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_nominalVoltageOutOfPhase(sourceClass.nominalVoltageOutOfPhase)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_xStepMax(sourceClass.xStepMax)	
				};
			keepAttPhaseTapChanger_278c02ae_4fb2_46a5_9921_1ef26ada5134->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::PhaseTapChanger);
				elem.map update_attribute_xStepMin(sourceClass.xStepMin)	
				};
	var keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f = __jointarget.objectsOfType(_jointarget::TransformerWinding);
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_g(sourceClass.g)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_b(sourceClass.b)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_x(sourceClass.x)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_r(sourceClass.r)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_ratedS(sourceClass.ratedS)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_ratedU(sourceClass.ratedU)	
				};
			keepAttTransformerWinding_f0f72b46_76d3_4cc4_bea3_3ca3612d3d0f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TransformerWinding);
				elem.map update_attribute_emergencyS(sourceClass.emergencyS)	
				};
	var keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26 = __jointarget.objectsOfType(_jointarget::RatioTapChanger);
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_initialDelay(sourceClass.initialDelay)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_subsequentDelay(sourceClass.subsequentDelay)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_ltcFlag(sourceClass.ltcFlag)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_regulationStatus(sourceClass.regulationStatus)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_neutralStep(sourceClass.neutralStep)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_neutralU(sourceClass.neutralU)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_lowStep(sourceClass.lowStep)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_highStep(sourceClass.highStep)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
				elem.map update_attribute_normalStep(sourceClass.normalStep)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttRatioTapChanger_515c5f5e_468d_4f4a_a7d9_58d226847b26->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Wires::RatioTapChanger);
				elem.map update_attribute_tculControlMode(sourceClass.tculControlMode)	
				};
	var keepAttPositionPoint_68ed5ba1_696a_4f45_843f_e87207c4d98f = __jointarget.objectsOfType(_jointarget::PositionPoint);
			keepAttPositionPoint_68ed5ba1_696a_4f45_843f_e87207c4d98f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61968::Common::PositionPoint);
				elem.map update_attribute_xPosition(sourceClass.xPosition)	
				};
			keepAttPositionPoint_68ed5ba1_696a_4f45_843f_e87207c4d98f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61968::Common::PositionPoint);
				elem.map update_attribute_yPosition(sourceClass.yPosition)	
				};
			keepAttPositionPoint_68ed5ba1_696a_4f45_843f_e87207c4d98f->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61968::Common::PositionPoint);
				elem.map update_attribute_zPosition(sourceClass.zPosition)	
				};
	var keepAttEquipmentContainer_92fdb7f0_9ab2_4cc4_b4ab_75fe2d35bb34 = __jointarget.objectsOfType(_jointarget::EquipmentContainer);
			keepAttEquipmentContainer_92fdb7f0_9ab2_4cc4_b4ab_75fe2d35bb34->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
	var keepAttSubstation_803b6ade_5450_4989_a76a_0f5bc5c915a4 = __jointarget.objectsOfType(_jointarget::Substation);
			keepAttSubstation_803b6ade_5450_4989_a76a_0f5bc5c915a4->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
	var keepAttBaseVoltage_77f56c82_4423_44c3_9d85_7c0ca5cc01b3 = __jointarget.objectsOfType(_jointarget::BaseVoltage);
			keepAttBaseVoltage_77f56c82_4423_44c3_9d85_7c0ca5cc01b3->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::BaseVoltage);
				elem.map update_attribute_nominalVoltage(sourceClass.nominalVoltage)	
				};
	var keepAttTerminal_6a3b7f10_0157_4ef6_91e8_d1471610fbe1 = __jointarget.objectsOfType(_jointarget::Terminal);
			keepAttTerminal_6a3b7f10_0157_4ef6_91e8_d1471610fbe1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};
			keepAttTerminal_6a3b7f10_0157_4ef6_91e8_d1471610fbe1->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::Terminal);
				elem.map update_attribute_connected(sourceClass.connected)	
				};
	var keepAttConnectivityNode_70300ead_1b96_484b_953b_bab9a645a0d2 = __jointarget.objectsOfType(_jointarget::ConnectivityNode);
			keepAttConnectivityNode_70300ead_1b96_484b_953b_bab9a645a0d2->forEach(elem) {
				var sourceClass = elem.invresolveone(_CIM::IEC61970::Core::IdentifiedObject);
				elem.map update_attribute_mRID(sourceClass.mRID)	
				};



	-- keep calculated
	var keepAttPowerTransformer_0f2c792c_8f61_4562_a0f8_d1d2bb851e51 = __jointarget.objectsOfType(_jointarget::PowerTransformer);
keepAttPowerTransformer_0f2c792c_8f61_4562_a0f8_d1d2bb851e51->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Wires::PowerTransformer);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupY::YPTR);
	elem.map update_attribute_PowerRate(leftElement, rightElement)	
	};
	var keepAttTapChanger_dd263609_7f35_4925_8410_672dc21c5600 = __jointarget.objectsOfType(_jointarget::TapChanger);
keepAttTapChanger_dd263609_7f35_4925_8410_672dc21c5600->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Wires::TapChanger);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupY::YLTC);
	elem.map update_attribute_posVal(leftElement, rightElement)	
	};
	var keepAttGeneratingUnit_2eb007ff_c6f1_428c_866d_4986aa31e401 = __jointarget.objectsOfType(_jointarget::GeneratingUnit);
keepAttGeneratingUnit_2eb007ff_c6f1_428c_866d_4986aa31e401->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
	elem.map update_attribute_State(leftElement, rightElement)	
	};
keepAttGeneratingUnit_2eb007ff_c6f1_428c_866d_4986aa31e401->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
	elem.map update_attribute_Speed(leftElement, rightElement)	
	};
keepAttGeneratingUnit_2eb007ff_c6f1_428c_866d_4986aa31e401->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
	elem.map update_attribute_DmdPwr(leftElement, rightElement)	
	};
keepAttGeneratingUnit_2eb007ff_c6f1_428c_866d_4986aa31e401->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Generation::Production::GeneratingUnit);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupZ::ZGEN);
	elem.map update_attribute_PwrRtg(leftElement, rightElement)	
	};
	var keepAttCurrentTransformer_cf1b1349_e0d2_4a99_b033_0b9a5e388e69 = __jointarget.objectsOfType(_jointarget::CurrentTransformer);
keepAttCurrentTransformer_cf1b1349_e0d2_4a99_b033_0b9a5e388e69->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Meas::CurrentTransformer);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupT::TCTR);
	elem.map update_attribute_Ampere(leftElement, rightElement)	
	};
keepAttCurrentTransformer_cf1b1349_e0d2_4a99_b033_0b9a5e388e69->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Meas::CurrentTransformer);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupT::TCTR);
	elem.map update_attribute_RatedAmpere(leftElement, rightElement)	
	};
	var keepAttVoltageTransformer_5f7193e5_8b5f_4a99_b1bb_d5ca28d1d52b = __jointarget.objectsOfType(_jointarget::VoltageTransformer);
keepAttVoltageTransformer_5f7193e5_8b5f_4a99_b1bb_d5ca28d1d52b->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Meas::PotentialTransformer);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupT::TVTR);
	elem.map update_attribute_Voltage(leftElement, rightElement)	
	};
keepAttVoltageTransformer_5f7193e5_8b5f_4a99_b1bb_d5ca28d1d52b->forEach(elem) {
	var leftElement = elem.invresolveone(_CIM::IEC61970::Meas::PotentialTransformer);
	var rightElement =  elem.invresolveone(_substationStandard::LNNodes::LNGroupT::TVTR);
	elem.map update_attribute_ratedVoltage(leftElement, rightElement)	
	};



	-- keep aggregates

	}
	
-- ##
-- # Natural Join Mappings
-- ##

-- ##
-- # Left Outer Join Mappings
-- ##
	
-- ##
-- # Theta Join Mappings
-- ##

-- mapping for Switch
mapping _CIM::IEC61970::Wires::Switch::thetaJoin_Switch_XSWI_To_Switch(rightElement : _substationStandard::LNNodes::LNGroupX::XSWI) : _jointarget::Switch 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_XSWI(result);
			result.map thetaJoin_trace_XSWI(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupX::XSWI::thetaJoin_update_XSWI(rightElement : _jointarget::Switch) : _jointarget::Switch {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::Switch::thetaJoin_trace_XSWI(leftElement : _CIM::IEC61970::Wires::Switch, rightElement : _substationStandard::LNNodes::LNGroupX::XSWI) : _mjtrace::join_Switch_XSWI_Switch {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for PowerTransformer
mapping _CIM::IEC61970::Wires::PowerTransformer::thetaJoin_PowerTransformer_YPTR_To_PowerTransformer(rightElement : _substationStandard::LNNodes::LNGroupY::YPTR) : _jointarget::PowerTransformer 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_YPTR(result);
			result.map thetaJoin_trace_YPTR(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupY::YPTR::thetaJoin_update_YPTR(rightElement : _jointarget::PowerTransformer) : _jointarget::PowerTransformer {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::PowerTransformer::thetaJoin_trace_YPTR(leftElement : _CIM::IEC61970::Wires::PowerTransformer, rightElement : _substationStandard::LNNodes::LNGroupY::YPTR) : _mjtrace::join_PowerTransformer_YPTR_PowerTransformer {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for FrequencyConverter
mapping _CIM::IEC61970::Wires::FrequencyConverter::thetaJoin_FrequencyConverter_ZTCF_To_FrequencyConverter(rightElement : _substationStandard::LNNodes::LNGroupZ::ZTCF) : _jointarget::FrequencyConverter 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZTCF(result);
			result.map thetaJoin_trace_ZTCF(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZTCF::thetaJoin_update_ZTCF(rightElement : _jointarget::FrequencyConverter) : _jointarget::FrequencyConverter {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::FrequencyConverter::thetaJoin_trace_ZTCF(leftElement : _CIM::IEC61970::Wires::FrequencyConverter, rightElement : _substationStandard::LNNodes::LNGroupZ::ZTCF) : _mjtrace::join_FrequencyConverter_ZTCF_FrequencyConverter {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for ACLineSegment
mapping _CIM::IEC61970::Wires::ACLineSegment::thetaJoin_ACLineSegment_ZLIN_To_ACLineSegment(rightElement : _substationStandard::LNNodes::LNGroupZ::ZLIN) : _jointarget::ACLineSegment 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZLIN(result);
			result.map thetaJoin_trace_ZLIN(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZLIN::thetaJoin_update_ZLIN(rightElement : _jointarget::ACLineSegment) : _jointarget::ACLineSegment {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::ACLineSegment::thetaJoin_trace_ZLIN(leftElement : _CIM::IEC61970::Wires::ACLineSegment, rightElement : _substationStandard::LNNodes::LNGroupZ::ZLIN) : _mjtrace::join_ACLineSegment_ZLIN_ACLineSegment {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for DCLineSegment
mapping _CIM::IEC61970::Wires::DCLineSegment::thetaJoin_DCLineSegment_ZLIN_To_DCLineSegment(rightElement : _substationStandard::LNNodes::LNGroupZ::ZLIN) : _jointarget::DCLineSegment 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZLIN(result);
			result.map thetaJoin_trace_ZLIN(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZLIN::thetaJoin_update_ZLIN(rightElement : _jointarget::DCLineSegment) : _jointarget::DCLineSegment {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::DCLineSegment::thetaJoin_trace_ZLIN(leftElement : _CIM::IEC61970::Wires::DCLineSegment, rightElement : _substationStandard::LNNodes::LNGroupZ::ZLIN) : _mjtrace::join_DCLineSegment_ZLIN_DCLineSegment {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for StaticVarCompensator
mapping _CIM::IEC61970::Wires::StaticVarCompensator::thetaJoin_StaticVarCompensator_ZTCR_To_StaticVarCompensator(rightElement : _substationStandard::LNNodes::LNGroupZ::ZTCR) : _jointarget::StaticVarCompensator 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZTCR(result);
			result.map thetaJoin_trace_ZTCR(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZTCR::thetaJoin_update_ZTCR(rightElement : _jointarget::StaticVarCompensator) : _jointarget::StaticVarCompensator {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::StaticVarCompensator::thetaJoin_trace_ZTCR(leftElement : _CIM::IEC61970::Wires::StaticVarCompensator, rightElement : _substationStandard::LNNodes::LNGroupZ::ZTCR) : _mjtrace::join_StaticVarCompensator_ZTCR_StaticVarCompensator {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for TapChanger
mapping _CIM::IEC61970::Wires::TapChanger::thetaJoin_TapChanger_YLTC_To_TapChanger(rightElement : _substationStandard::LNNodes::LNGroupY::YLTC) : _jointarget::TapChanger 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_YLTC(result);
			result.map thetaJoin_trace_YLTC(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupY::YLTC::thetaJoin_update_YLTC(rightElement : _jointarget::TapChanger) : _jointarget::TapChanger {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::TapChanger::thetaJoin_trace_YLTC(leftElement : _CIM::IEC61970::Wires::TapChanger, rightElement : _substationStandard::LNNodes::LNGroupY::YLTC) : _mjtrace::join_TapChanger_YLTC_TapChanger {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for Breaker
mapping _CIM::IEC61970::Wires::Breaker::thetaJoin_Breaker_XCBR_To_Breaker(rightElement : _substationStandard::LNNodes::LNGroupX::XCBR) : _jointarget::Breaker 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_XCBR(result);
			result.map thetaJoin_trace_XCBR(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupX::XCBR::thetaJoin_update_XCBR(rightElement : _jointarget::Breaker) : _jointarget::Breaker {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::Breaker::thetaJoin_trace_XCBR(leftElement : _CIM::IEC61970::Wires::Breaker, rightElement : _substationStandard::LNNodes::LNGroupX::XCBR) : _mjtrace::join_Breaker_XCBR_Breaker {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for ShuntCapacitorCompensator
mapping _CIM::IEC61970::Wires::ShuntCompensator::thetaJoin_ShuntCompensator_ZCAP_To_ShuntCapacitorCompensator(rightElement : _substationStandard::LNNodes::LNGroupZ::ZCAP) : _jointarget::ShuntCapacitorCompensator 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZCAP(result);
			result.map thetaJoin_trace_ZCAP(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZCAP::thetaJoin_update_ZCAP(rightElement : _jointarget::ShuntCapacitorCompensator) : _jointarget::ShuntCapacitorCompensator {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::ShuntCapacitorCompensator::thetaJoin_trace_ZCAP(leftElement : _CIM::IEC61970::Wires::ShuntCompensator, rightElement : _substationStandard::LNNodes::LNGroupZ::ZCAP) : _mjtrace::join_ShuntCompensator_ZCAP_ShuntCapacitorCompensator {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for GeneratingUnit
mapping _CIM::IEC61970::Generation::Production::GeneratingUnit::thetaJoin_GeneratingUnit_ZGEN_To_GeneratingUnit(rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) : _jointarget::GeneratingUnit 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZGEN(result);
			result.map thetaJoin_trace_ZGEN(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZGEN::thetaJoin_update_ZGEN(rightElement : _jointarget::GeneratingUnit) : _jointarget::GeneratingUnit {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::GeneratingUnit::thetaJoin_trace_ZGEN(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) : _mjtrace::join_GeneratingUnit_ZGEN_GeneratingUnit {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for SynchronousMachine
mapping _CIM::IEC61970::Wires::SynchronousMachine::thetaJoin_SynchronousMachine_ZRRC_To_SynchronousMachine(rightElement : _substationStandard::LNNodes::LNGroupZ::ZRRC) : _jointarget::SynchronousMachine 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_ZRRC(result);
			result.map thetaJoin_trace_ZRRC(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupZ::ZRRC::thetaJoin_update_ZRRC(rightElement : _jointarget::SynchronousMachine) : _jointarget::SynchronousMachine {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::SynchronousMachine::thetaJoin_trace_ZRRC(leftElement : _CIM::IEC61970::Wires::SynchronousMachine, rightElement : _substationStandard::LNNodes::LNGroupZ::ZRRC) : _mjtrace::join_SynchronousMachine_ZRRC_SynchronousMachine {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for Connector
mapping _CIM::IEC61970::Wires::Connector::thetaJoin_Connector_Connector_To_Connector(rightElement : _CIM::IEC61970::Wires::Connector) : _jointarget::Connector 
when {
		true
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_Connector(result);
			result.map thetaJoin_trace_Connector(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _CIM::IEC61970::Wires::Connector::thetaJoin_update_Connector(rightElement : _jointarget::Connector) : _jointarget::Connector {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::Connector::thetaJoin_trace_Connector(leftElement : _CIM::IEC61970::Wires::Connector, rightElement : _CIM::IEC61970::Wires::Connector) : _mjtrace::join_Connector_Connector_Connector {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for Ground
mapping _CIM::IEC61970::Wires::Ground::thetaJoin_Ground_Ground_To_Ground(rightElement : _CIM::IEC61970::Wires::Ground) : _jointarget::Ground 
when {
		true
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_Ground(result);
			result.map thetaJoin_trace_Ground(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _CIM::IEC61970::Wires::Ground::thetaJoin_update_Ground(rightElement : _jointarget::Ground) : _jointarget::Ground {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::Ground::thetaJoin_trace_Ground(leftElement : _CIM::IEC61970::Wires::Ground, rightElement : _CIM::IEC61970::Wires::Ground) : _mjtrace::join_Ground_Ground_Ground {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for EnergyConsumer
mapping _CIM::IEC61970::Wires::EnergyConsumer::thetaJoin_EnergyConsumer_EnergyConsumer_To_EnergyConsumer(rightElement : _CIM::IEC61970::Wires::EnergyConsumer) : _jointarget::EnergyConsumer 
when {
		true
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_EnergyConsumer(result);
			result.map thetaJoin_trace_EnergyConsumer(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _CIM::IEC61970::Wires::EnergyConsumer::thetaJoin_update_EnergyConsumer(rightElement : _jointarget::EnergyConsumer) : _jointarget::EnergyConsumer {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::EnergyConsumer::thetaJoin_trace_EnergyConsumer(leftElement : _CIM::IEC61970::Wires::EnergyConsumer, rightElement : _CIM::IEC61970::Wires::EnergyConsumer) : _mjtrace::join_EnergyConsumer_EnergyConsumer_EnergyConsumer {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for Resistor
mapping _CIM::IEC61970::Wires::Resistor::thetaJoin_Resistor_Resistor_To_Resistor(rightElement : _CIM::IEC61970::Wires::Resistor) : _jointarget::Resistor 
when {
		true
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_Resistor(result);
			result.map thetaJoin_trace_Resistor(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _CIM::IEC61970::Wires::Resistor::thetaJoin_update_Resistor(rightElement : _jointarget::Resistor) : _jointarget::Resistor {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::Resistor::thetaJoin_trace_Resistor(leftElement : _CIM::IEC61970::Wires::Resistor, rightElement : _CIM::IEC61970::Wires::Resistor) : _mjtrace::join_Resistor_Resistor_Resistor {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for RectifierInverter
mapping _CIM::IEC61970::Wires::RectifierInverter::thetaJoin_RectifierInverter_RectifierInverter_To_RectifierInverter(rightElement : _CIM::IEC61970::Wires::RectifierInverter) : _jointarget::RectifierInverter 
when {
		true
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_RectifierInverter(result);
			result.map thetaJoin_trace_RectifierInverter(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _CIM::IEC61970::Wires::RectifierInverter::thetaJoin_update_RectifierInverter(rightElement : _jointarget::RectifierInverter) : _jointarget::RectifierInverter {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::RectifierInverter::thetaJoin_trace_RectifierInverter(leftElement : _CIM::IEC61970::Wires::RectifierInverter, rightElement : _CIM::IEC61970::Wires::RectifierInverter) : _mjtrace::join_RectifierInverter_RectifierInverter_RectifierInverter {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for CurrentTransformer
mapping _CIM::IEC61970::Meas::CurrentTransformer::thetaJoin_CurrentTransformer_TCTR_To_CurrentTransformer(rightElement : _substationStandard::LNNodes::LNGroupT::TCTR) : _jointarget::CurrentTransformer 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_TCTR(result);
			result.map thetaJoin_trace_TCTR(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupT::TCTR::thetaJoin_update_TCTR(rightElement : _jointarget::CurrentTransformer) : _jointarget::CurrentTransformer {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::CurrentTransformer::thetaJoin_trace_TCTR(leftElement : _CIM::IEC61970::Meas::CurrentTransformer, rightElement : _substationStandard::LNNodes::LNGroupT::TCTR) : _mjtrace::join_CurrentTransformer_TCTR_CurrentTransformer {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- mapping for VoltageTransformer
mapping _CIM::IEC61970::Meas::PotentialTransformer::thetaJoin_PotentialTransformer_TVTR_To_VoltageTransformer(rightElement : _substationStandard::LNNodes::LNGroupT::TVTR) : _jointarget::VoltageTransformer 
when {
		self.mRID = rightElement.NamePlt.IdNs
}
{
		-- create the target instances
		end {
			rightElement.map thetaJoin_update_TVTR(result);
			result.map thetaJoin_trace_TVTR(self, rightElement)
		}
}

-- additional mapping for the right element, so that it appears in the QVT mapping table (for resolve)
mapping _substationStandard::LNNodes::LNGroupT::TVTR::thetaJoin_update_TVTR(rightElement : _jointarget::VoltageTransformer) : _jointarget::VoltageTransformer {
	init {
		result:=rightElement;
	}
}

-- create the trace class instance
mapping _jointarget::VoltageTransformer::thetaJoin_trace_TVTR(leftElement : _CIM::IEC61970::Meas::PotentialTransformer, rightElement : _substationStandard::LNNodes::LNGroupT::TVTR) : _mjtrace::join_PotentialTransformer_TVTR_VoltageTransformer {
	left := leftElement;
	right := rightElement;
	target := self;
}


-- ##
-- # Keep outgoing Mappings
-- ##
-- mappings for Switch

-- set the links for "Location" if instances already exist
mapping inout _jointarget::Switch::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::Switch::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}

-- mappings for Switch

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::Switch::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::Switch::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}

-- mappings for Switch

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::Switch::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::Switch::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}

-- mappings for Switch

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::Switch::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::Switch::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}

-- mappings for PowerTransformer

-- set the links for "Location" if instances already exist
mapping inout _jointarget::PowerTransformer::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::PowerTransformer::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for PowerTransformer

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::PowerTransformer::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::PowerTransformer::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for PowerTransformer

-- set the links for "TransformerWindings" if instances already exist
mapping inout _jointarget::PowerTransformer::update_keepOutgoing_TransformerWindings(elem : _jointarget::TransformerWinding) {
	self.TransformerWindings+=elem;
}

-- set the links for "TransformerWindings" if instances have to be created
mapping inout _jointarget::PowerTransformer::update_keepOutgoing_and_create_TransformerWindings(elem : _CIM::IEC61970::Wires::TransformerWinding) {
	self.TransformerWindings+=elem.map TransformerWindings_TransformerWinding_to_TransformerWinding();
}

-- create instances of the type of "TransformerWindings"
mapping _CIM::IEC61970::Wires::TransformerWinding::TransformerWindings_TransformerWinding_to_TransformerWinding() : _jointarget::TransformerWinding {
}

/*mapping _jointarget::TransformerWinding::trace_keepOutgoing_TransformerWindings(source : _CIM::IEC61970::Wires::TransformerWinding) : _mjtrace::ref_TransformerWinding_TransformerWinding_TransformerWindings {
	result.source := source;
	result.target := self;
}*/

-- mappings for FrequencyConverter

-- set the links for "Location" if instances already exist
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for FrequencyConverter

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for FrequencyConverter

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for FrequencyConverter

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::FrequencyConverter::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for ACLineSegment

-- set the links for "Location" if instances already exist
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for ACLineSegment

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for ACLineSegment

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for ACLineSegment

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::ACLineSegment::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for DCLineSegment

-- set the links for "Location" if instances already exist
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for DCLineSegment

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for DCLineSegment

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for DCLineSegment

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::DCLineSegment::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for StaticVarCompensator

-- set the links for "Location" if instances already exist
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for StaticVarCompensator

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for StaticVarCompensator

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*7

-- mappings for StaticVarCompensator

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::StaticVarCompensator::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for TapChanger

-- set the links for "Location" if instances already exist
mapping inout _jointarget::TapChanger::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::TapChanger::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for Breaker

-- set the links for "Location" if instances already exist
mapping inout _jointarget::Breaker::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::Breaker::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for Breaker

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::Breaker::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::Breaker::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for Breaker

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::Breaker::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::Breaker::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for Breaker

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::Breaker::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::Breaker::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for ShuntCapacitorCompensator

-- set the links for "Location" if instances already exist
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for ShuntCapacitorCompensator

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for ShuntCapacitorCompensator

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for ShuntCapacitorCompensator

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::ShuntCapacitorCompensator::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for GeneratingUnit

-- set the links for "Location" if instances already exist
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for GeneratingUnit

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for GeneratingUnit

-- set the links for "SynchronousMachines" if instances already exist
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_SynchronousMachines(elem : _jointarget::SynchronousMachine) {
	self.SynchronousMachines+=elem;
}

-- set the links for "SynchronousMachines" if instances have to be created
mapping inout _jointarget::GeneratingUnit::update_keepOutgoing_and_create_SynchronousMachines(elem : _CIM::IEC61970::Wires::SynchronousMachine) {
	self.SynchronousMachines+=elem.map SynchronousMachines_SynchronousMachine_to_SynchronousMachine();
}

-- create instances of the type of "SynchronousMachines"
mapping _CIM::IEC61970::Wires::SynchronousMachine::SynchronousMachines_SynchronousMachine_to_SynchronousMachine() : _jointarget::SynchronousMachine {
}

mapping _jointarget::SynchronousMachine::trace_keepOutgoing_SynchronousMachines(source : _CIM::IEC61970::Wires::SynchronousMachine) : _mjtrace::ref_SynchronousMachine_SynchronousMachine_SynchronousMachines {
	result.source := source;
	result.target := self;
}

-- mappings for SynchronousMachine

-- set the links for "Location" if instances already exist
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for SynchronousMachine

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for SynchronousMachine

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for SynchronousMachine

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for SynchronousMachine

-- set the links for "GeneratingUnit" if instances already exist
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_GeneratingUnit(elem : _jointarget::GeneratingUnit) {
	self.GeneratingUnit:=elem;
}

-- set the links for "GeneratingUnit" if instances have to be created
mapping inout _jointarget::SynchronousMachine::update_keepOutgoing_and_create_GeneratingUnit(elem : _CIM::IEC61970::Generation::Production::GeneratingUnit) {
	self.GeneratingUnit:=elem.map GeneratingUnit_GeneratingUnit_to_GeneratingUnit();
}

-- create instances of the type of "GeneratingUnit"
mapping _CIM::IEC61970::Generation::Production::GeneratingUnit::GeneratingUnit_GeneratingUnit_to_GeneratingUnit() : _jointarget::GeneratingUnit {
}

mapping _jointarget::GeneratingUnit::trace_keepOutgoing_GeneratingUnit(source : _CIM::IEC61970::Generation::Production::GeneratingUnit) : _mjtrace::ref_GeneratingUnit_GeneratingUnit_GeneratingUnit {
	result.source := source;
	result.target := self;
}

-- mappings for Connector

-- set the links for "Location" if instances already exist
mapping inout _jointarget::Connector::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::Connector::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for Connector

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::Connector::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::Connector::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for Connector

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::Connector::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::Connector::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for Connector

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::Connector::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::Connector::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for Ground

-- set the links for "Location" if instances already exist
mapping inout _jointarget::Ground::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::Ground::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for Ground

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::Ground::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::Ground::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for Ground

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::Ground::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::Ground::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for Ground

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::Ground::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::Ground::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for EnergyConsumer

-- set the links for "Location" if instances already exist
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for EnergyConsumer

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for EnergyConsumer

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for EnergyConsumer

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::EnergyConsumer::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for Resistor

-- set the links for "Location" if instances already exist
mapping inout _jointarget::Resistor::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::Resistor::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for Resistor

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::Resistor::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::Resistor::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for Resistor

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::Resistor::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::Resistor::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for Resistor

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::Resistor::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::Resistor::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for RectifierInverter

-- set the links for "Location" if instances already exist
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for RectifierInverter

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for RectifierInverter

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for RectifierInverter

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::RectifierInverter::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
/*mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
}

mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
	result.source := source;
	result.target := self;
}*/

-- mappings for CurrentTransformer

-- set the links for "Location" if instances already exist
mapping inout _jointarget::CurrentTransformer::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::CurrentTransformer::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for CurrentTransformer

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::CurrentTransformer::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::CurrentTransformer::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for VoltageTransformer

-- set the links for "Location" if instances already exist
mapping inout _jointarget::VoltageTransformer::update_keepOutgoing_Location(elem : _jointarget::Location) {
	self.Location:=elem;
}

-- set the links for "Location" if instances have to be created
mapping inout _jointarget::VoltageTransformer::update_keepOutgoing_and_create_Location(elem : _CIM::IEC61968::Common::Location) {
	self.Location:=elem.map Location_Location_to_Location();
}

-- create instances of the type of "Location"
/*mapping _CIM::IEC61968::Common::Location::Location_Location_to_Location() : _jointarget::Location {
}

mapping _jointarget::Location::trace_keepOutgoing_Location(source : _CIM::IEC61968::Common::Location) : _mjtrace::ref_Location_Location_Location {
	result.source := source;
	result.target := self;
}*/

-- mappings for VoltageTransformer

-- set the links for "EquipmentContainer" if instances already exist
mapping inout _jointarget::VoltageTransformer::update_keepOutgoing_EquipmentContainer(elem : _jointarget::EquipmentContainer) {
	self.EquipmentContainer:=elem;
}

-- set the links for "EquipmentContainer" if instances have to be created
mapping inout _jointarget::VoltageTransformer::update_keepOutgoing_and_create_EquipmentContainer(elem : _CIM::IEC61970::Core::EquipmentContainer) {
	self.EquipmentContainer:=elem.map EquipmentContainer_EquipmentContainer_to_EquipmentContainer();
}

-- create instances of the type of "EquipmentContainer"
/*mapping _CIM::IEC61970::Core::EquipmentContainer::EquipmentContainer_EquipmentContainer_to_EquipmentContainer() : _jointarget::EquipmentContainer {
}

mapping _jointarget::EquipmentContainer::trace_keepOutgoing_EquipmentContainer(source : _CIM::IEC61970::Core::EquipmentContainer) : _mjtrace::ref_EquipmentContainer_EquipmentContainer_EquipmentContainer {
	result.source := source;
	result.target := self;
}*/

-- mappings for PhaseTapChanger

-- set the links for "TransformerWinding" if instances already exist
mapping inout _jointarget::PhaseTapChanger::update_keepOutgoing_TransformerWinding(elem : _jointarget::TransformerWinding) {
	self.TransformerWinding:=elem;
}

-- set the links for "TransformerWinding" if instances have to be created
mapping inout _jointarget::PhaseTapChanger::update_keepOutgoing_and_create_TransformerWinding(elem : _CIM::IEC61970::Wires::TransformerWinding) {
	self.TransformerWinding:=elem.map TransformerWinding_TransformerWinding_to_TransformerWinding();
}

-- create instances of the type of "TransformerWinding"
mapping _CIM::IEC61970::Wires::TransformerWinding::TransformerWinding_TransformerWinding_to_TransformerWinding() : _jointarget::TransformerWinding {
}

mapping _jointarget::TransformerWinding::trace_keepOutgoing_TransformerWinding(source : _CIM::IEC61970::Wires::TransformerWinding) : _mjtrace::ref_TransformerWinding_TransformerWinding_TransformerWinding {
	result.source := source;
	result.target := self;
}

-- mappings for TransformerWinding

-- set the links for "BaseVoltage" if instances already exist
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_BaseVoltage(elem : _jointarget::BaseVoltage) {
	self.BaseVoltage:=elem;
}

-- set the links for "BaseVoltage" if instances have to be created
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_and_create_BaseVoltage(elem : _CIM::IEC61970::Core::BaseVoltage) {
	self.BaseVoltage:=elem.map BaseVoltage_BaseVoltage_to_BaseVoltage();
}

-- create instances of the type of "BaseVoltage"
/*mapping _CIM::IEC61970::Core::BaseVoltage::BaseVoltage_BaseVoltage_to_BaseVoltage() : _jointarget::BaseVoltage {
}

mapping _jointarget::BaseVoltage::trace_keepOutgoing_BaseVoltage(source : _CIM::IEC61970::Core::BaseVoltage) : _mjtrace::ref_BaseVoltage_BaseVoltage_BaseVoltage {
	result.source := source;
	result.target := self;
}*/

-- mappings for TransformerWinding

-- set the links for "Terminals" if instances already exist
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_Terminals(elem : _jointarget::Terminal) {
	self.Terminals+=elem;
}

-- set the links for "Terminals" if instances have to be created
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_and_create_Terminals(elem : _CIM::IEC61970::Core::Terminal) {
	self.Terminals+=elem.map Terminals_Terminal_to_Terminal();
}

-- create instances of the type of "Terminals"
-- mapping _CIM::IEC61970::Core::Terminal::Terminals_Terminal_to_Terminal() : _jointarget::Terminal {
-- }

-- mapping _jointarget::Terminal::trace_keepOutgoing_Terminals(source : _CIM::IEC61970::Core::Terminal) : _mjtrace::ref_Terminal_Terminal_Terminals {
--	result.source := source;
--	result.target := self;
-- }

-- mappings for TransformerWinding

-- set the links for "PhaseTapChanger" if instances already exist
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_PhaseTapChanger(elem : _jointarget::PhaseTapChanger) {
	self.PhaseTapChanger:=elem;
}

-- set the links for "PhaseTapChanger" if instances have to be created
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_and_create_PhaseTapChanger(elem : _CIM::IEC61970::Wires::PhaseTapChanger) {
	self.PhaseTapChanger:=elem.map PhaseTapChanger_PhaseTapChanger_to_PhaseTapChanger();
}

-- create instances of the type of "PhaseTapChanger"
mapping _CIM::IEC61970::Wires::PhaseTapChanger::PhaseTapChanger_PhaseTapChanger_to_PhaseTapChanger() : _jointarget::PhaseTapChanger {
}

mapping _jointarget::PhaseTapChanger::trace_keepOutgoing_PhaseTapChanger(source : _CIM::IEC61970::Wires::PhaseTapChanger) : _mjtrace::ref_PhaseTapChanger_PhaseTapChanger_PhaseTapChanger {
	result.source := source;
	result.target := self;
}

-- mappings for TransformerWinding

-- set the links for "RatioTapChanger" if instances already exist
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_RatioTapChanger(elem : _jointarget::RatioTapChanger) {
	self.RatioTapChanger:=elem;
}

-- set the links for "RatioTapChanger" if instances have to be created
mapping inout _jointarget::TransformerWinding::update_keepOutgoing_and_create_RatioTapChanger(elem : _CIM::IEC61970::Wires::RatioTapChanger) {
	self.RatioTapChanger:=elem.map RatioTapChanger_RatioTapChanger_to_RatioTapChanger();
}

-- create instances of the type of "RatioTapChanger"
mapping _CIM::IEC61970::Wires::RatioTapChanger::RatioTapChanger_RatioTapChanger_to_RatioTapChanger() : _jointarget::RatioTapChanger {
}

mapping _jointarget::RatioTapChanger::trace_keepOutgoing_RatioTapChanger(source : _CIM::IEC61970::Wires::RatioTapChanger) : _mjtrace::ref_RatioTapChanger_RatioTapChanger_RatioTapChanger {
	result.source := source;
	result.target := self;
}

-- mappings for RatioTapChanger

-- set the links for "TransformerWinding" if instances already exist
mapping inout _jointarget::RatioTapChanger::update_keepOutgoing_TransformerWinding(elem : _jointarget::TransformerWinding) {
	self.TransformerWinding:=elem;
}

-- set the links for "TransformerWinding" if instances have to be created
mapping inout _jointarget::RatioTapChanger::update_keepOutgoing_and_create_TransformerWinding(elem : _CIM::IEC61970::Wires::TransformerWinding) {
	self.TransformerWinding:=elem.map TransformerWinding_TransformerWinding_to_TransformerWinding();
}

-- create instances of the type of "TransformerWinding"
-- mapping _CIM::IEC61970::Wires::TransformerWinding::TransformerWinding_TransformerWinding_to_TransformerWinding() : _jointarget::TransformerWinding {
-- }

-- mapping _jointarget::TransformerWinding::trace_keepOutgoing_TransformerWinding(source : _CIM::IEC61970::Wires::TransformerWinding) : _mjtrace::ref_TransformerWinding_TransformerWinding_TransformerWinding {
--	result.source := source;
--	result.target := self;
-- }

-- mappings for Location

-- set the links for "Position" if instances already exist
mapping inout _jointarget::Location::update_keepOutgoing_Position(elem : _jointarget::PositionPoint) {
	self.Position:=elem;
}

-- set the links for "Position" if instances have to be created
mapping inout _jointarget::Location::update_keepOutgoing_and_create_Position(elem : _CIM::IEC61968::Common::PositionPoint) {
	self.Position:=elem.map Position_PositionPoint_to_PositionPoint();
}

-- create instances of the type of "Position"
mapping _CIM::IEC61968::Common::PositionPoint::Position_PositionPoint_to_PositionPoint() : _jointarget::PositionPoint {
}

mapping _jointarget::PositionPoint::trace_keepOutgoing_Position(source : _CIM::IEC61968::Common::PositionPoint) : _mjtrace::ref_PositionPoint_PositionPoint_Position {
	result.source := source;
	result.target := self;
}

-- mappings for VoltageLevel

-- set the links for "Substation" if instances already exist
mapping inout _jointarget::VoltageLevel::update_keepOutgoing_Substation(elem : _jointarget::Substation) {
	self.Substation:=elem;
}

-- set the links for "Substation" if instances have to be created
mapping inout _jointarget::VoltageLevel::update_keepOutgoing_and_create_Substation(elem : _CIM::IEC61970::Core::Substation) {
	self.Substation:=elem.map Substation_Substation_to_Substation();
}

-- create instances of the type of "Substation"
mapping _CIM::IEC61970::Core::Substation::Substation_Substation_to_Substation() : _jointarget::Substation {
}

mapping _jointarget::Substation::trace_keepOutgoing_Substation(source : _CIM::IEC61970::Core::Substation) : _mjtrace::ref_Substation_Substation_Substation {
	result.source := source;
	result.target := self;
}

-- mappings for Terminal

-- set the links for "ConnectivityNode" if instances already exist
mapping inout _jointarget::Terminal::update_keepOutgoing_ConnectivityNode(elem : _jointarget::ConnectivityNode) {
	self.ConnectivityNode:=elem;
}

-- set the links for "ConnectivityNode" if instances have to be created
mapping inout _jointarget::Terminal::update_keepOutgoing_and_create_ConnectivityNode(elem : _CIM::IEC61970::Core::ConnectivityNode) {
	self.ConnectivityNode:=elem.map ConnectivityNode_ConnectivityNode_to_ConnectivityNode();
}

-- create instances of the type of "ConnectivityNode"
mapping _CIM::IEC61970::Core::ConnectivityNode::ConnectivityNode_ConnectivityNode_to_ConnectivityNode() : _jointarget::ConnectivityNode {
}

mapping _jointarget::ConnectivityNode::trace_keepOutgoing_ConnectivityNode(source : _CIM::IEC61970::Core::ConnectivityNode) : _mjtrace::ref_ConnectivityNode_ConnectivityNode_ConnectivityNode {
	result.source := source;
	result.target := self;
}


-- ##
-- # Keep incoming Mappings
-- ##
-- ##
-- # Keep attribute Mappings
-- ##
mapping inout _jointarget::Switch::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Switch::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::PowerTransformer::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::FrequencyConverter::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::FrequencyConverter::update_attribute_frequency(attValue : Real) {
	self.frequency:=attValue;
}
mapping inout _jointarget::FrequencyConverter::update_attribute_maxP(attValue : Real) {
	self.maxP:=attValue;
}
mapping inout _jointarget::FrequencyConverter::update_attribute_minP(attValue : Real) {
	self.minP:=attValue;
}
mapping inout _jointarget::FrequencyConverter::update_attribute_maxU(attValue : Real) {
	self.maxU:=attValue;
}
mapping inout _jointarget::FrequencyConverter::update_attribute_minU(attValue : Real) {
	self.minU:=attValue;
}
mapping inout _jointarget::ACLineSegment::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::ACLineSegment::update_attribute_length(attValue : Real) {
	self.length:=attValue;
}
mapping inout _jointarget::ACLineSegment::update_attribute_gch(attValue : Real) {
	self.gch:=attValue;
}
mapping inout _jointarget::ACLineSegment::update_attribute_r(attValue : Real) {
	self.r:=attValue;
}
mapping inout _jointarget::ACLineSegment::update_attribute_x(attValue : Real) {
	self.x:=attValue;
}
mapping inout _jointarget::ACLineSegment::update_attribute_bch(attValue : Real) {
	self.bch:=attValue;
}
mapping inout _jointarget::DCLineSegment::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::DCLineSegment::update_attribute_length(attValue : Real) {
	self.length:=attValue;
}
mapping inout _jointarget::DCLineSegment::update_attribute_dcSegmentResistance(attValue : Real) {
	self.dcSegmentResistance:=attValue;
}
mapping inout _jointarget::DCLineSegment::update_attribute_dcSegmentInductance(attValue : Real) {
	self.dcSegmentInductance:=attValue;
}
mapping inout _jointarget::StaticVarCompensator::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::StaticVarCompensator::update_attribute_sVCControlMode(attValue : CIM::IEC61970::Wires::SVCControlMode) {
	self.sVCControlMode:=attValue;
}
mapping inout _jointarget::StaticVarCompensator::update_attribute_inductiveRating(attValue : Real) {
	self.inductiveRating:=attValue;
}
mapping inout _jointarget::StaticVarCompensator::update_attribute_capacitiveRating(attValue : Real) {
	self.capacitiveRating:=attValue;
}
mapping inout _jointarget::StaticVarCompensator::update_attribute_voltageSetPoint(attValue : Real) {
	self.voltageSetPoint:=attValue;
}
mapping inout _jointarget::StaticVarCompensator::update_attribute_slope(attValue : Real) {
	self.slope:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_initialDelay(attValue : Real) {
	self.initialDelay:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_subsequentDelay(attValue : Real) {
	self.subsequentDelay:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_ltcFlag(attValue : Boolean) {
	self.ltcFlag:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_regulationStatus(attValue : Boolean) {
	self.regulationStatus:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_neutralStep(attValue : Integer) {
	self.neutralStep:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_neutralU(attValue : Real) {
	self.neutralU:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_lowStep(attValue : Integer) {
	self.lowStep:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_highStep(attValue : Integer) {
	self.highStep:=attValue;
}
mapping inout _jointarget::TapChanger::update_attribute_normalStep(attValue : Integer) {
	self.normalStep:=attValue;
}
mapping inout _jointarget::Breaker::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Breaker::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::Breaker::update_attribute_ratedCurrent(attValue : Real) {
	self.ratedCurrent:=attValue;
}
mapping inout _jointarget::Breaker::update_attribute_inTransitTime(attValue : Real) {
	self.inTransitTime:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_normalSections(attValue : Integer) {
	self.normalSections:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_minU(attValue : Real) {
	self.minU:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_nomQ(attValue : Real) {
	self.nomQ:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_nomU(attValue : Real) {
	self.nomU:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_maximumSections(attValue : Integer) {
	self.maximumSections:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_maxU(attValue : Real) {
	self.maxU:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_bPerSection(attValue : Real) {
	self.bPerSection:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_gPerSection(attValue : Real) {
	self.gPerSection:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_voltageSensitivity(attValue : Real) {
	self.voltageSensitivity:=attValue;
}
mapping inout _jointarget::ShuntCapacitorCompensator::update_attribute_reactivePerSection(attValue : Real) {
	self.reactivePerSection:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_highControlLimit(attValue : Real) {
	self.highControlLimit:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_autoCntrlMarginP(attValue : Real) {
	self.autoCntrlMarginP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_ratedGrossMaxP(attValue : Real) {
	self.ratedGrossMaxP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_allocSpinResP(attValue : Real) {
	self.allocSpinResP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_stepChange(attValue : Real) {
	self.stepChange:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_startupCost(attValue : Real) {
	self.startupCost:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_nominalP(attValue : Real) {
	self.nominalP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_energyMinP(attValue : Real) {
	self.energyMinP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_initialP(attValue : Real) {
	self.initialP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_minEconomicP(attValue : Real) {
	self.minEconomicP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_maxEconomicP(attValue : Real) {
	self.maxEconomicP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_ratedGrossMinP(attValue : Real) {
	self.ratedGrossMinP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_minOperatingP(attValue : Real) {
	self.minOperatingP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_baseP(attValue : Real) {
	self.baseP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_maxOperatingP(attValue : Real) {
	self.maxOperatingP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_ratedNetMaxP(attValue : Real) {
	self.ratedNetMaxP:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_efficiency(attValue : Real) {
	self.efficiency:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_controlDeadband(attValue : Real) {
	self.controlDeadband:=attValue;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_normalPF(attValue : Real) {
	self.normalPF:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_xDirectSync(attValue : Real) {
	self.xDirectSync:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_xQuadTrans(attValue : Real) {
	self.xQuadTrans:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_xQuadSubtrans(attValue : Real) {
	self.xQuadSubtrans:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_minQ(attValue : Real) {
	self.minQ:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_maxU(attValue : Real) {
	self.maxU:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_maxQ(attValue : Real) {
	self.maxQ:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_type(attValue : CIM::IEC61970::Wires::SynchronousMachineType) {
	self.type:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_r2(attValue : Real) {
	self.r2:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_x2(attValue : Real) {
	self.x2:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_r(attValue : Real) {
	self.r:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_x(attValue : Real) {
	self.x:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_xQuadSync(attValue : Real) {
	self.xQuadSync:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_ratedS(attValue : Real) {
	self.ratedS:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_minU(attValue : Real) {
	self.minU:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_xDirectTrans(attValue : Real) {
	self.xDirectTrans:=attValue;
}
mapping inout _jointarget::SynchronousMachine::update_attribute_baseQ(attValue : Real) {
	self.baseQ:=attValue;
}
mapping inout _jointarget::Connector::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Ground::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::EnergyConsumer::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::EnergyConsumer::update_attribute_pfixed(attValue : Real) {
	self.pfixed:=attValue;
}
mapping inout _jointarget::EnergyConsumer::update_attribute_qfixedPct(attValue : Real) {
	self.qfixedPct:=attValue;
}
mapping inout _jointarget::EnergyConsumer::update_attribute_pfixedPct(attValue : Real) {
	self.pfixedPct:=attValue;
}
mapping inout _jointarget::EnergyConsumer::update_attribute_qfixed(attValue : Real) {
	self.qfixed:=attValue;
}
mapping inout _jointarget::Resistor::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_minCompoundVoltage(attValue : Real) {
	self.minCompoundVoltage:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_minP(attValue : Real) {
	self.minP:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_maxU(attValue : Real) {
	self.maxU:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_operatingMode(attValue : String) {
	self.operatingMode:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_frequency(attValue : Real) {
	self.frequency:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_maxP(attValue : Real) {
	self.maxP:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_ratedU(attValue : Real) {
	self.ratedU:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_minU(attValue : Real) {
	self.minU:=attValue;
}
mapping inout _jointarget::RectifierInverter::update_attribute_compoundResistance(attValue : Real) {
	self.compoundResistance:=attValue;
}
mapping inout _jointarget::CurrentTransformer::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::CurrentTransformer::update_attribute_maxRatio(attValue : Real) {
	self.maxRatio:=attValue;
}
mapping inout _jointarget::VoltageTransformer::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::VoltageTransformer::update_attribute_nominalRatio(attValue : Real) {
	self.nominalRatio:=attValue;
}
mapping inout _jointarget::Disconnector::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Disconnector::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::Jumper::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Jumper::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::LoadBreakSwitch::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::LoadBreakSwitch::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::Fuse::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Fuse::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::Fuse::update_attribute_ratingCurrent(attValue : Real) {
	self.ratingCurrent:=attValue;
}
mapping inout _jointarget::GroundDisconnector::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::GroundDisconnector::update_attribute_normalOpen(attValue : Boolean) {
	self.normalOpen:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_initialDelay(attValue : Real) {
	self.initialDelay:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_subsequentDelay(attValue : Real) {
	self.subsequentDelay:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_ltcFlag(attValue : Boolean) {
	self.ltcFlag:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_regulationStatus(attValue : Boolean) {
	self.regulationStatus:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_neutralStep(attValue : Integer) {
	self.neutralStep:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_neutralU(attValue : Real) {
	self.neutralU:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_lowStep(attValue : Integer) {
	self.lowStep:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_highStep(attValue : Integer) {
	self.highStep:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_normalStep(attValue : Integer) {
	self.normalStep:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_phaseTapChangerType(attValue : CIM::IEC61970::Wires::PhaseTapChangerKind) {
	self.phaseTapChangerType:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_windingConnectionAngle(attValue : Real) {
	self.windingConnectionAngle:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_stepPhaseShiftIncrement(attValue : Real) {
	self.stepPhaseShiftIncrement:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_voltageStepIncrementOutOfPhase(attValue : Real) {
	self.voltageStepIncrementOutOfPhase:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_nominalVoltageOutOfPhase(attValue : Real) {
	self.nominalVoltageOutOfPhase:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_xStepMax(attValue : Real) {
	self.xStepMax:=attValue;
}
mapping inout _jointarget::PhaseTapChanger::update_attribute_xStepMin(attValue : Real) {
	self.xStepMin:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_g(attValue : Real) {
	self.g:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_b(attValue : Real) {
	self.b:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_x(attValue : Real) {
	self.x:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_r(attValue : Real) {
	self.r:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_ratedS(attValue : Real) {
	self.ratedS:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_ratedU(attValue : Real) {
	self.ratedU:=attValue;
}
mapping inout _jointarget::TransformerWinding::update_attribute_emergencyS(attValue : Real) {
	self.emergencyS:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_initialDelay(attValue : Real) {
	self.initialDelay:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_subsequentDelay(attValue : Real) {
	self.subsequentDelay:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_ltcFlag(attValue : Boolean) {
	self.ltcFlag:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_regulationStatus(attValue : Boolean) {
	self.regulationStatus:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_neutralStep(attValue : Integer) {
	self.neutralStep:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_neutralU(attValue : Real) {
	self.neutralU:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_lowStep(attValue : Integer) {
	self.lowStep:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_highStep(attValue : Integer) {
	self.highStep:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_normalStep(attValue : Integer) {
	self.normalStep:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::RatioTapChanger::update_attribute_tculControlMode(attValue : CIM::IEC61970::Wires::TransformerControlMode) {
	self.tculControlMode:=attValue;
}
mapping inout _jointarget::PositionPoint::update_attribute_xPosition(attValue : String) {
	self.xPosition:=attValue;
}
mapping inout _jointarget::PositionPoint::update_attribute_yPosition(attValue : String) {
	self.yPosition:=attValue;
}
mapping inout _jointarget::PositionPoint::update_attribute_zPosition(attValue : String) {
	self.zPosition:=attValue;
}
mapping inout _jointarget::EquipmentContainer::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::VoltageLevel::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Substation::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::BaseVoltage::update_attribute_nominalVoltage(attValue : Real) {
	self.nominalVoltage:=attValue;
}
mapping inout _jointarget::Terminal::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}
mapping inout _jointarget::Terminal::update_attribute_connected(attValue : Boolean) {
	self.connected:=attValue;
}
mapping inout _jointarget::ConnectivityNode::update_attribute_mRID(attValue : String) {
	self.mRID:=attValue;
}

-- ##
-- # Keep calculated Mappings
-- ##
mapping inout _jointarget::PowerTransformer::update_attribute_PowerRate(leftElement : _CIM::IEC61970::Wires::PowerTransformer, rightElement : _substationStandard::LNNodes::LNGroupY::YPTR) {
	self.PowerRate:=substationStandard::LNNodes::LNGroupY::YPTR.PwrRtg.setMag.f;
}
mapping inout _jointarget::TapChanger::update_attribute_posVal(leftElement : _CIM::IEC61970::Wires::TapChanger, rightElement : _substationStandard::LNNodes::LNGroupY::YLTC) {
	self.posVal:=rightElement.TapPos.valWTr.posVal;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_State(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) {
	self.State:=rightElement.GnSt;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_Speed(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) {
	self.Speed:=rightElement.GnSpd.mag.f;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_DmdPwr(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) {
	self.DmdPwr:=rightElement.DmdPwr.setMag.f;
}
mapping inout _jointarget::GeneratingUnit::update_attribute_PwrRtg(leftElement : _CIM::IEC61970::Generation::Production::GeneratingUnit, rightElement : _substationStandard::LNNodes::LNGroupZ::ZGEN) {
	self.PwrRtg:=rightElement.PwrRtg.setMag.f;
}
mapping inout _jointarget::CurrentTransformer::update_attribute_Ampere(leftElement : _CIM::IEC61970::Meas::CurrentTransformer, rightElement : _substationStandard::LNNodes::LNGroupT::TCTR) {
	self.Ampere:=rightElement.Amp.instMag.f;
}
mapping inout _jointarget::CurrentTransformer::update_attribute_RatedAmpere(leftElement : _CIM::IEC61970::Meas::CurrentTransformer, rightElement : _substationStandard::LNNodes::LNGroupT::TCTR) {
	self.RatedAmpere:=rightElement.ARtg.setMag.f;
}
mapping inout _jointarget::VoltageTransformer::update_attribute_Voltage(leftElement : _CIM::IEC61970::Meas::PotentialTransformer, rightElement : _substationStandard::LNNodes::LNGroupT::TVTR) {
	self.Voltage:=rightElement.Vol.instMag.f;
}
mapping inout _jointarget::VoltageTransformer::update_attribute_ratedVoltage(leftElement : _CIM::IEC61970::Meas::PotentialTransformer, rightElement : _substationStandard::LNNodes::LNGroupT::TVTR) {
	self.ratedVoltage:=rightElement.VRtg.setMag.f;
}



-- ##
-- # Keep aggregate Mappings
-- ##
